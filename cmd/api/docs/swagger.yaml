basePath: /
definitions:
  auth.TokenPair:
    properties:
      csrf_token:
        type: string
      expires_in:
        type: integer
      refresh_token:
        type: string
      token:
        type: string
      token_type:
        type: string
    type: object
  dto.AnalyzeURLRequest:
    properties:
      url:
        type: string
    required:
    - url
    type: object
  dto.AnalyzeURLResponse:
    properties:
      description:
        type: string
      embed_type:
        type: string
      is_embeddable:
        type: boolean
      message:
        type: string
      preview:
        type: string
      settings:
        additionalProperties: true
        type: object
      title:
        type: string
      url:
        type: string
    type: object
  dto.CreateBreakingNewsRequest:
    properties:
      alert_level:
        description: low, medium, high, critical
        type: string
      content:
        type: string
      position:
        type: integer
    required:
    - content
    type: object
  dto.CreateCardGridRequest:
    properties:
      card_style:
        description: minimal, shadow, bordered
        type: string
      cards:
        items:
          $ref: '#/definitions/dto.GridCard'
        type: array
      columns:
        description: 'default: 3'
        type: integer
      gap_size:
        description: small, medium, large
        type: string
      position:
        type: integer
    required:
    - cards
    type: object
  dto.CreateChartRequest:
    properties:
      chart_data:
        additionalProperties: true
        type: object
      position:
        type: integer
    required:
    - chart_data
    type: object
  dto.CreateCommentsRequest:
    properties:
      allow_replies:
        description: 'default: true'
        type: boolean
      comment_system:
        description: internal, disqus, facebook
        type: string
      max_depth:
        description: 'default: 3'
        type: integer
      moderation:
        description: auto, manual, none
        type: string
      position:
        type: integer
      require_login:
        description: 'default: true'
        type: boolean
      show_count:
        description: 'default: true'
        type: boolean
      sort_order:
        description: newest, oldest, popular
        type: string
    type: object
  dto.CreateCountdownRequest:
    properties:
      position:
        type: integer
      target_date:
        description: RFC3339 format
        type: string
      title:
        type: string
    required:
    - target_date
    type: object
  dto.CreateEmbedRequest:
    properties:
      title:
        type: string
      url:
        type: string
    required:
    - url
    type: object
  dto.CreateFAQRequest:
    properties:
      faq_items:
        items:
          $ref: '#/definitions/models.FAQItem'
        type: array
      position:
        type: integer
    required:
    - faq_items
    type: object
  dto.CreateHeroRequest:
    properties:
      background_type:
        description: image, video, gradient, color
        type: string
      background_url:
        type: string
      cta_buttons:
        items:
          $ref: '#/definitions/dto.HeroButton'
        type: array
      min_height:
        description: 500px
        type: string
      overlay_color:
        description: rgba(0,0,0,0.5)
        type: string
      position:
        type: integer
      subtitle:
        type: string
      text_align:
        description: center, left, right
        type: string
      title:
        type: string
    required:
    - title
    type: object
  dto.CreateMapRequest:
    properties:
      latitude:
        type: number
      longitude:
        type: number
      markers:
        items:
          $ref: '#/definitions/models.MapMarker'
        type: array
      position:
        type: integer
    required:
    - latitude
    - longitude
    type: object
  dto.CreateNewsTickerRequest:
    properties:
      category:
        description: breaking, sports, economy, tech
        type: string
      news_source:
        description: internal, rss, api
        type: string
      position:
        type: integer
    type: object
  dto.CreateNewsletterRequest:
    properties:
      description:
        type: string
      position:
        type: integer
      title:
        type: string
    type: object
  dto.CreateProductRequest:
    properties:
      affiliate_tracking:
        description: 'default: false'
        type: boolean
      buy_button_text:
        description: '"Satın Al"'
        type: string
      buy_button_url:
        type: string
      display_type:
        description: card, list, grid
        type: string
      position:
        type: integer
      product_id:
        type: string
      show_price:
        description: 'default: true'
        type: boolean
      show_rating:
        description: 'default: true'
        type: boolean
      show_stock:
        description: 'default: false'
        type: boolean
    required:
    - product_id
    type: object
  dto.CreateQuizRequest:
    properties:
      position:
        type: integer
      questions:
        items:
          $ref: '#/definitions/models.QuizQuestion'
        type: array
      quiz_type:
        description: quiz, poll, survey
        type: string
      title:
        type: string
    required:
    - questions
    - quiz_type
    - title
    type: object
  dto.CreateRatingRequest:
    properties:
      allow_reviews:
        description: 'default: true'
        type: boolean
      max_rating:
        description: 'default: 5'
        type: integer
      position:
        type: integer
      rating_type:
        description: stars, thumbs, numeric
        type: string
      require_login:
        description: 'default: true'
        type: boolean
      show_average:
        description: 'default: true'
        type: boolean
    type: object
  dto.CreateSearchRequest:
    properties:
      filters:
        description: '["kategori", "tarih", "yazar"]'
        items:
          type: string
        type: array
      placeholder:
        description: '"Arama yapın..."'
        type: string
      position:
        type: integer
      results_per_page:
        description: 'default: 10'
        type: integer
      search_api:
        description: '"/api/search"'
        type: string
      search_scope:
        description: site, articles, products
        type: string
      show_filters:
        description: 'default: true'
        type: boolean
    type: object
  dto.CreateSocialFeedRequest:
    properties:
      auto_refresh:
        description: 'default: false'
        type: boolean
      feed_query:
        description: '#hashtag, @username, etc.'
        type: string
      feed_type:
        description: hashtag, user, list
        type: string
      platform:
        description: twitter, instagram, linkedin, facebook
        type: string
      position:
        type: integer
      post_count:
        description: 'default: 5'
        type: integer
      refresh_interval:
        description: 'seconds, default: 300'
        type: integer
      show_avatars:
        description: 'default: true'
        type: boolean
      show_timestamps:
        description: 'default: true'
        type: boolean
    required:
    - feed_query
    - feed_type
    - platform
    type: object
  dto.DetectEmbedsRequest:
    properties:
      content:
        type: string
    required:
    - content
    type: object
  dto.DetectEmbedsResponse:
    properties:
      count:
        type: integer
      suggestions:
        items:
          $ref: '#/definitions/dto.EmbedSuggestion'
        type: array
    type: object
  dto.EmbedSuggestion:
    properties:
      description:
        type: string
      embed_type:
        type: string
      preview:
        type: string
      settings:
        additionalProperties: true
        type: object
      title:
        type: string
      url:
        type: string
    type: object
  dto.GridCard:
    properties:
      content:
        type: string
      image:
        type: string
      link:
        type: string
      title:
        type: string
    required:
    - title
    type: object
  dto.HeroButton:
    properties:
      style:
        description: primary, secondary, outline
        type: string
      text:
        type: string
      url:
        type: string
    required:
    - text
    - url
    type: object
  dto.ReorderBlocksRequest:
    properties:
      block_positions:
        additionalProperties:
          type: integer
        type: object
    required:
    - block_positions
    type: object
  dto.UpdateArticleBlocksRequest:
    properties:
      blocks:
        items:
          $ref: '#/definitions/models.ArticleContentBlock'
        type: array
    required:
    - blocks
    type: object
  dto.UpdateContentBlockRequest:
    properties:
      content:
        type: string
      is_visible:
        type: boolean
      position:
        type: integer
      settings:
        type: string
    type: object
  dto.UserLoginDTO:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  dto.UserRegistrationDTO:
    properties:
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        minLength: 6
        type: string
      role:
        type: string
      username:
        maxLength: 50
        minLength: 3
        type: string
    required:
    - email
    - password
    - role
    - username
    type: object
  dto.UserResponseDTO:
    properties:
      email:
        type: string
      first_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
      role:
        type: string
      username:
        type: string
    type: object
  handlers.BookmarkResponse:
    properties:
      is_bookmarked:
        type: boolean
      total_count:
        type: integer
    type: object
  handlers.ConnectionInfo:
    properties:
      cipher_suite:
        type: string
      compression:
        type: string
      keep_alive:
        type: boolean
      local_addr:
        type: string
      remote_addr:
        type: string
      tls_version:
        type: string
    type: object
  handlers.CreateArticleWithBlocksRequest:
    properties:
      category_ids:
        items:
          type: integer
        type: array
      content_blocks:
        items:
          $ref: '#/definitions/models.ArticleContentBlock'
        type: array
      featured_image:
        type: string
      gallery:
        items:
          type: string
        type: array
      language:
        type: string
      meta_description:
        type: string
      meta_title:
        type: string
      status:
        type: string
      summary:
        type: string
      tag_ids:
        items:
          type: integer
        type: array
      title:
        type: string
    required:
    - content_blocks
    - title
    type: object
  handlers.CreateCommentRequest:
    properties:
      content:
        type: string
      parent_id:
        type: integer
    required:
    - content
    type: object
  handlers.CreateTranslationRequest:
    properties:
      content:
        type: string
      language:
        type: string
      meta_description:
        type: string
      summary:
        type: string
      title:
        type: string
      translation_type:
        description: '"manual", "ai", "professional"'
        type: string
    required:
    - content
    - language
    - title
    type: object
  handlers.EnqueueJobRequest:
    properties:
      job_type:
        type: string
      payload:
        additionalProperties: true
        type: object
      priority:
        type: integer
      queue_name:
        type: string
    required:
    - job_type
    - queue_name
    type: object
  handlers.FollowResponse:
    properties:
      follower_count:
        type: integer
      is_following:
        type: boolean
    type: object
  handlers.HTTP2StatusResponse:
    properties:
      connection_info:
        $ref: '#/definitions/handlers.ConnectionInfo'
      features:
        additionalProperties: true
        type: object
      h2c_enabled:
        type: boolean
      http2_enabled:
        type: boolean
      multiplexing_available:
        type: boolean
      performance_stats:
        $ref: '#/definitions/handlers.PerformanceStats'
      protocol:
        type: string
      server_push_available:
        type: boolean
      tls_enabled:
        type: boolean
    type: object
  handlers.JSONEngineStatus:
    properties:
      available_engines:
        items:
          type: string
        type: array
      current_engine:
        type: string
      performance:
        additionalProperties:
          type: string
        type: object
      timestamp:
        type: string
    type: object
  handlers.MarkAllNotificationsReadResponse:
    properties:
      message:
        type: string
      updated_count:
        type: integer
    type: object
  handlers.NotificationStatsResponse:
    properties:
      connected_users:
        type: integer
      system_status:
        type: string
    type: object
  handlers.PerformanceStats:
    properties:
      active_connections:
        type: integer
      goroutines:
        type: integer
      memory_usage:
        type: string
    type: object
  handlers.QueueHealthDetails:
    properties:
      active_workers:
        type: integer
      failed_jobs:
        type: integer
      last_processed:
        type: integer
      pending_jobs:
        type: integer
      processing_jobs:
        type: integer
      status:
        type: string
      worker_count:
        type: integer
    type: object
  handlers.QueueHealthResponse:
    properties:
      queues:
        additionalProperties:
          $ref: '#/definitions/handlers.QueueHealthDetails'
        type: object
      status:
        type: string
      timestamp:
        type: integer
    type: object
  handlers.QueueJobsResponse:
    properties:
      jobs:
        items:
          $ref: '#/definitions/queue.JobStatusInfo'
        type: array
      limit:
        type: integer
      page:
        type: integer
      queue_name:
        type: string
      total_count:
        type: integer
    type: object
  handlers.QueueStatsResponse:
    properties:
      queues:
        additionalProperties:
          $ref: '#/definitions/queue.QueueStats'
        type: object
      status:
        type: string
    type: object
  handlers.RecordInteractionRequest:
    properties:
      completion_rate:
        description: For view interactions (0.0-1.0)
        type: number
      duration:
        description: For view interactions
        type: integer
      interaction_type:
        description: view, bookmark, upvote, downvote, share, comment
        type: string
      platform:
        description: web, mobile, app
        type: string
      referrer_url:
        description: How user found the article
        type: string
    required:
    - interaction_type
    type: object
  handlers.Setup2FARequest:
    properties:
      totp_code:
        example: "123456"
        type: string
    required:
    - totp_code
    type: object
  handlers.Setup2FAResponse:
    properties:
      backup_codes:
        items:
          type: string
        type: array
      qr_code_url:
        type: string
      secret:
        type: string
    type: object
  handlers.TestNotificationRequest:
    properties:
      message:
        type: string
      type:
        description: '"system_alert", "user_notification"'
        type: string
      user_id:
        description: Required for user_notification type
        type: integer
    required:
    - message
    - type
    type: object
  handlers.UpdateCommentRequest:
    properties:
      content:
        type: string
    required:
    - content
    type: object
  handlers.UpdateTranslationRequest:
    properties:
      content:
        type: string
      meta_description:
        type: string
      status:
        description: '"draft", "published", "under_review"'
        type: string
      summary:
        type: string
      title:
        type: string
    type: object
  handlers.UserConnectionStatusResponse:
    properties:
      is_connected:
        type: boolean
      user_id:
        type: integer
    type: object
  handlers.Verify2FARequest:
    properties:
      backup_code:
        example: abcd-efgh-ijkl
        type: string
      totp_code:
        example: "123456"
        type: string
    type: object
  handlers.VideoInteractionRequest:
    properties:
      duration:
        description: How long the video was watched (seconds)
        type: integer
      interaction_type:
        description: view, like, dislike, share, comment
        type: string
      platform:
        description: web, mobile, app
        type: string
      quality:
        description: 720p, 1080p, 4K, auto
        type: string
      referrer_url:
        description: How user found the video
        type: string
      watch_percent:
        description: For view interactions (0.0-1.0)
        type: number
    required:
    - interaction_type
    type: object
  handlers.VoteRequest:
    properties:
      type:
        type: string
    required:
    - type
    type: object
  handlers.VoteResponse:
    properties:
      dislikes:
        type: integer
      likes:
        type: integer
    type: object
  models.AgentTaskResponse:
    properties:
      completed_at:
        type: string
      created_at:
        type: string
      error_msg:
        type: string
      id:
        type: integer
      input_data:
        additionalProperties: true
        type: object
      output_data:
        additionalProperties: true
        type: object
      priority:
        type: integer
      started_at:
        type: string
      status:
        type: string
      task_type:
        type: string
      updated_at:
        type: string
    type: object
  models.Article:
    properties:
      allow_comments:
        type: boolean
      author:
        allOf:
        - $ref: '#/definitions/models.User'
        description: Relations
      author_id:
        type: integer
      blocks_version:
        description: For versioning content blocks structure
        type: integer
      bookmarks:
        items:
          $ref: '#/definitions/models.Bookmark'
        type: array
      categories:
        items:
          $ref: '#/definitions/models.Category'
        type: array
      comments:
        items:
          $ref: '#/definitions/models.Comment'
        type: array
      content:
        description: Legacy content - will be migrated to blocks
        type: string
      content_blocks:
        items:
          $ref: '#/definitions/models.ArticleContentBlock'
        type: array
      content_type:
        description: legacy, blocks, hybrid
        type: string
      created_at:
        type: string
      featured_image:
        type: string
      gallery:
        description: JSON array of image URLs
        items:
          type: string
        type: array
      has_blocks:
        description: True if article uses content blocks
        type: boolean
      id:
        type: integer
      is_breaking:
        type: boolean
      is_featured:
        type: boolean
      is_sticky:
        type: boolean
      language:
        type: string
      meta_description:
        type: string
      meta_title:
        type: string
      published_at:
        type: string
      read_time:
        description: in minutes
        type: integer
      related:
        items:
          $ref: '#/definitions/models.RelatedArticle'
        type: array
      scheduled_at:
        type: string
      slug:
        type: string
      source:
        type: string
      source_url:
        type: string
      status:
        type: string
      summary:
        type: string
      tags:
        items:
          $ref: '#/definitions/models.Tag'
        type: array
      title:
        type: string
      translations:
        items:
          $ref: '#/definitions/models.ArticleTranslation'
        type: array
      updated_at:
        type: string
      user_interactions:
        items:
          $ref: '#/definitions/models.UserArticleInteraction'
        type: array
      views:
        type: integer
      votes:
        items:
          $ref: '#/definitions/models.Vote'
        type: array
    type: object
  models.ArticleContentBlock:
    properties:
      article:
        allOf:
        - $ref: '#/definitions/models.Article'
        description: Relations
      article_id:
        type: integer
      block_type:
        description: text, image, video, gallery, quote, code, divider, etc.
        type: string
      content:
        description: Main content for the block
        type: string
      created_at:
        type: string
      id:
        type: integer
      is_visible:
        type: boolean
      position:
        description: Order within the article
        type: integer
      settings:
        description: JSON for block-specific settings
        type: object
      updated_at:
        type: string
    type: object
  models.ArticleTranslation:
    properties:
      article:
        allOf:
        - $ref: '#/definitions/models.Article'
        description: Relations
      article_id:
        type: integer
      content:
        type: string
      created_at:
        type: string
      id:
        type: integer
      is_active:
        type: boolean
      language:
        description: ISO 639-1 code (en, tr, es, etc.)
        type: string
      meta_description:
        type: string
      meta_title:
        type: string
      quality:
        description: Quality score 0-1 for AI translations
        type: number
      slug:
        type: string
      status:
        description: draft, published, pending_review
        type: string
      summary:
        type: string
      title:
        type: string
      translated_by:
        description: User who created/edited the translation
        type: integer
      translation_type:
        description: manual, ai_generated, auto_translated
        type: string
      translator:
        $ref: '#/definitions/models.User'
      updated_at:
        type: string
    type: object
  models.ArticleWithTranslations:
    properties:
      article:
        $ref: '#/definitions/models.Article'
      published_translations:
        items:
          $ref: '#/definitions/models.ArticleTranslation'
        type: array
      stats:
        $ref: '#/definitions/models.TranslationStats'
      translations:
        items:
          $ref: '#/definitions/models.ArticleTranslation'
        type: array
    type: object
  models.Bookmark:
    properties:
      article:
        $ref: '#/definitions/models.Article'
      article_id:
        type: integer
      created_at:
        type: string
      id:
        type: integer
      user:
        allOf:
        - $ref: '#/definitions/models.User'
        description: Relations
      user_id:
        type: integer
    type: object
  models.BreakingNewsBanner:
    properties:
      article:
        allOf:
        - $ref: '#/definitions/models.Article'
        description: Relations
      article_id:
        type: integer
      background_color:
        type: string
      content:
        type: string
      created_at:
        type: string
      end_time:
        type: string
      id:
        type: integer
      is_active:
        type: boolean
      priority:
        description: Higher number = higher priority
        type: integer
      start_time:
        type: string
      style:
        type: string
      text_color:
        type: string
      title:
        type: string
      updated_at:
        type: string
    type: object
  models.BulkTranslationRequest:
    properties:
      entity_ids:
        items:
          type: integer
        type: array
      entity_type:
        type: string
      force_retranslate:
        type: boolean
      priority:
        type: integer
      source_language:
        type: string
      target_languages:
        items:
          type: string
        type: array
    required:
    - entity_type
    - target_languages
    type: object
  models.BulkTranslationResponse:
    properties:
      estimated_time:
        type: string
      failed_jobs:
        type: integer
      job_ids:
        items:
          type: integer
        type: array
      queued_jobs:
        type: integer
      skipped_jobs:
        type: integer
    type: object
  models.CategorizeContentRequest:
    properties:
      content:
        type: string
      options:
        description: available categories to choose from
        items:
          type: string
        type: array
    required:
    - content
    type: object
  models.CategorizeContentResponse:
    properties:
      categories:
        items:
          $ref: '#/definitions/models.CategorySuggestion'
        type: array
      tags:
        items:
          $ref: '#/definitions/models.TagSuggestion'
        type: array
    type: object
  models.Category:
    properties:
      articles:
        items:
          $ref: '#/definitions/models.Article'
        type: array
      children:
        items:
          $ref: '#/definitions/models.Category'
        type: array
      color:
        description: Hex color code
        type: string
      created_at:
        type: string
      description:
        type: string
      icon:
        type: string
      id:
        type: integer
      is_active:
        type: boolean
      name:
        type: string
      parent:
        allOf:
        - $ref: '#/definitions/models.Category'
        description: Relations
      parent_id:
        type: integer
      slug:
        type: string
      sort_order:
        type: integer
      updated_at:
        type: string
    type: object
  models.CategorySuggestion:
    properties:
      confidence:
        type: number
      name:
        type: string
      reason:
        type: string
    type: object
  models.Comment:
    properties:
      article:
        allOf:
        - $ref: '#/definitions/models.Article'
        description: Relations
      article_id:
        type: integer
      content:
        type: string
      created_at:
        type: string
      id:
        type: integer
      is_edited:
        type: boolean
      parent:
        $ref: '#/definitions/models.Comment'
      parent_id:
        type: integer
      replies:
        items:
          $ref: '#/definitions/models.Comment'
        type: array
      status:
        type: string
      updated_at:
        type: string
      user:
        $ref: '#/definitions/models.User'
      user_id:
        type: integer
      votes:
        items:
          $ref: '#/definitions/models.Vote'
        type: array
    type: object
  models.ContentImprovement:
    properties:
      explanation:
        type: string
      impact:
        description: low, medium, high
        type: string
      original:
        type: string
      suggestion:
        type: string
      type:
        description: grammar, style, structure, seo
        type: string
    type: object
  models.CreateAgentTaskRequest:
    properties:
      input_data:
        additionalProperties: true
        type: object
      priority:
        type: integer
      task_type:
        type: string
      webhook_url:
        type: string
    required:
    - input_data
    - task_type
    type: object
  models.CreateCommentRequest:
    properties:
      content:
        maxLength: 1000
        minLength: 5
        type: string
      parent_id:
        type: integer
    required:
    - content
    type: object
  models.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  models.FAQItem:
    properties:
      answer:
        type: string
      category:
        type: string
      question:
        type: string
    type: object
  models.Follow:
    properties:
      created_at:
        type: string
      follower:
        allOf:
        - $ref: '#/definitions/models.User'
        description: Relations
      follower_id:
        type: integer
      following:
        $ref: '#/definitions/models.User'
      following_id:
        type: integer
      id:
        type: integer
    type: object
  models.GenerateContentRequest:
    properties:
      keywords:
        example:
        - AI
        - journalism
        - technology
        items:
          type: string
        type: array
      length:
        description: short, medium, long
        example: medium
        type: string
      perspective:
        description: objective, positive, critical
        example: objective
        type: string
      style:
        description: news, blog, formal, casual
        example: news
        type: string
      topic:
        example: AI in journalism
        type: string
    required:
    - topic
    type: object
  models.GenerateContentResponse:
    properties:
      content:
        type: string
      keywords:
        items:
          type: string
        type: array
      read_time:
        type: integer
      summary:
        type: string
    type: object
  models.GenerateHeadlinesRequest:
    properties:
      content:
        example: News article content
        type: string
      count:
        example: 5
        maximum: 10
        minimum: 1
        type: integer
      style:
        description: news, clickbait, formal, casual
        example: news
        type: string
    required:
    - content
    type: object
  models.GenerateHeadlinesResponse:
    properties:
      count:
        type: integer
      headlines:
        items:
          type: string
        type: array
    type: object
  models.ImproveContentRequest:
    properties:
      content:
        type: string
      goals:
        description: clarity, engagement, seo, readability
        items:
          type: string
        type: array
      target_level:
        description: beginner, intermediate, advanced
        type: string
    required:
    - content
    type: object
  models.ImproveContentResponse:
    properties:
      improved_content:
        type: string
      quality_score:
        type: number
      suggestions:
        items:
          $ref: '#/definitions/models.ContentImprovement'
        type: array
    type: object
  models.LiveNewsStream:
    properties:
      category_id:
        type: integer
      cover_image_url:
        description: These fields are used in the handler but not in the DB schema
        type: string
      created_at:
        type: string
      description:
        type: string
      end_time:
        type: string
      id:
        type: integer
      is_highlighted:
        type: boolean
      start_time:
        type: string
      status:
        description: scheduled, live, ended
        type: string
      title:
        type: string
      updated_at:
        type: string
      updates:
        description: Relations
        items:
          $ref: '#/definitions/models.LiveNewsUpdate'
        type: array
      viewer_count:
        type: integer
    type: object
  models.LiveNewsUpdate:
    properties:
      content:
        type: string
      created_at:
        type: string
      id:
        type: integer
      importance:
        type: string
      stream:
        allOf:
        - $ref: '#/definitions/models.LiveNewsStream'
        description: Relations
      stream_id:
        type: integer
      title:
        type: string
      update_type:
        type: string
      updated_at:
        type: string
    type: object
  models.LocalizedArticle:
    properties:
      allow_comments:
        type: boolean
      author:
        allOf:
        - $ref: '#/definitions/models.User'
        description: Relations
      author_id:
        type: integer
      categories:
        items:
          $ref: '#/definitions/models.Category'
        type: array
      content:
        type: string
      created_at:
        type: string
      featured_image:
        type: string
      gallery:
        items:
          type: string
        type: array
      id:
        description: Base article fields
        type: integer
      is_breaking:
        type: boolean
      is_featured:
        type: boolean
      is_sticky:
        type: boolean
      language:
        type: string
      meta_description:
        type: string
      meta_title:
        type: string
      original_language:
        type: string
      published_at:
        type: string
      read_time:
        type: integer
      scheduled_at:
        type: string
      slug:
        type: string
      source:
        type: string
      source_url:
        type: string
      status:
        type: string
      summary:
        type: string
      tags:
        items:
          $ref: '#/definitions/models.Tag'
        type: array
      title:
        description: Localized content fields
        type: string
      translation_exists:
        description: Additional metadata
        type: boolean
      translation_quality:
        type: number
      translation_type:
        type: string
      updated_at:
        type: string
      views:
        type: integer
    type: object
  models.MapMarker:
    properties:
      description:
        type: string
      icon:
        type: string
      lat:
        type: number
      lng:
        type: number
      title:
        type: string
    type: object
  models.Media:
    properties:
      alt_text:
        type: string
      caption:
        type: string
      created_at:
        type: string
      file_name:
        type: string
      id:
        type: integer
      mime_type:
        type: string
      original_name:
        type: string
      path:
        type: string
      size:
        type: integer
      updated_at:
        type: string
      uploaded_by:
        type: integer
      uploader:
        allOf:
        - $ref: '#/definitions/models.User'
        description: Relations
      url:
        type: string
    type: object
  models.Menu:
    properties:
      created_at:
        type: string
      id:
        type: integer
      is_active:
        type: boolean
      items:
        description: Relations
        items:
          $ref: '#/definitions/models.MenuItem'
        type: array
      location:
        description: header, footer, sidebar
        type: string
      name:
        type: string
      slug:
        type: string
      updated_at:
        type: string
    type: object
  models.MenuItem:
    properties:
      category:
        $ref: '#/definitions/models.Category'
      category_id:
        type: integer
      children:
        items:
          $ref: '#/definitions/models.MenuItem'
        type: array
      created_at:
        type: string
      icon:
        type: string
      id:
        type: integer
      is_active:
        type: boolean
      menu:
        allOf:
        - $ref: '#/definitions/models.Menu'
        description: Relations
      menu_id:
        type: integer
      parent:
        $ref: '#/definitions/models.MenuItem'
      parent_id:
        type: integer
      sort_order:
        type: integer
      target:
        type: string
      title:
        type: string
      updated_at:
        type: string
      url:
        type: string
    type: object
  models.ModerateContentRequest:
    properties:
      content:
        type: string
      content_type:
        description: comment, article, message
        type: string
      strict:
        description: enable strict moderation
        type: boolean
    required:
    - content
    type: object
  models.ModerateContentResponse:
    properties:
      categories:
        items:
          $ref: '#/definitions/models.ModerationCategory'
        type: array
      confidence:
        type: number
      is_approved:
        type: boolean
      reason:
        type: string
      severity:
        type: string
    type: object
  models.ModerationCategory:
    properties:
      category:
        type: string
      confidence:
        type: number
      severity:
        type: string
    type: object
  models.NewsStory:
    properties:
      article:
        allOf:
        - $ref: '#/definitions/models.Article'
        description: Relations
      article_id:
        type: integer
      background_color:
        type: string
      create_user_id:
        type: integer
      created_at:
        type: string
      duration:
        description: Duration in seconds
        type: integer
      external_url:
        type: string
      headline:
        type: string
      id:
        type: integer
      image_url:
        type: string
      is_active:
        type: boolean
      sort_order:
        type: integer
      start_time:
        type: string
      text_color:
        type: string
      updated_at:
        type: string
      view_count:
        type: integer
    type: object
  models.Newsletter:
    properties:
      content:
        type: string
      created_at:
        type: string
      created_by:
        type: integer
      creator:
        allOf:
        - $ref: '#/definitions/models.User'
        description: Relations
      id:
        type: integer
      scheduled_at:
        type: string
      sent_at:
        type: string
      status:
        type: string
      subject:
        type: string
      title:
        type: string
      updated_at:
        type: string
    type: object
  models.Notification:
    properties:
      created_at:
        type: string
      data:
        description: Additional data as JSON
        type: string
      id:
        type: integer
      is_read:
        type: boolean
      message:
        type: string
      read_at:
        type: string
      title:
        type: string
      type:
        type: string
      user:
        allOf:
        - $ref: '#/definitions/models.User'
        description: Relations
      user_id:
        type: integer
    type: object
  models.Page:
    properties:
      author:
        allOf:
        - $ref: '#/definitions/models.User'
        description: Relations
      author_id:
        description: Publishing
        type: integer
      children:
        items:
          $ref: '#/definitions/models.Page'
        type: array
      content_blocks:
        items:
          $ref: '#/definitions/models.PageContentBlock'
        type: array
      created_at:
        description: Timestamps
        type: string
      excerpt_text:
        type: string
      featured_image:
        description: Content Management
        type: string
      id:
        type: integer
      is_homepage:
        type: boolean
      is_landing_page:
        type: boolean
      language:
        type: string
      layout:
        type: string
      layout_data:
        type: object
      meta_description:
        type: string
      meta_title:
        type: string
      page_settings:
        type: object
      parent:
        $ref: '#/definitions/models.Page'
      parent_id:
        description: Hierarchy Support
        type: integer
      published_at:
        type: string
      scheduled_at:
        type: string
      seo_settings:
        description: Settings (JSON fields)
        type: object
      slug:
        type: string
      sort_order:
        type: integer
      status:
        type: string
      template:
        type: string
      title:
        type: string
      updated_at:
        type: string
      views:
        description: Analytics
        type: integer
    type: object
  models.PageContentBlock:
    properties:
      ai_generated:
        description: AI & Analytics
        type: boolean
      block_type:
        type: string
      child_blocks:
        items:
          $ref: '#/definitions/models.PageContentBlock'
        type: array
      container:
        $ref: '#/definitions/models.PageContentBlock'
      container_id:
        description: For nested containers
        type: integer
      container_type:
        description: section, row, column, card
        type: string
      content:
        type: string
      created_at:
        description: Timestamps
        type: string
      grid_settings:
        type: object
      id:
        type: integer
      is_container:
        description: Container Properties
        type: boolean
      is_visible:
        type: boolean
      page:
        allOf:
        - $ref: '#/definitions/models.Page'
        description: Relations
      page_id:
        type: integer
      performance_data:
        type: object
      position:
        type: integer
      responsive_data:
        description: Responsive Design
        type: object
      settings:
        type: object
      styles:
        description: Custom CSS styles
        type: object
      updated_at:
        type: string
    type: object
  models.PaginatedArticlesResponse:
    properties:
      articles:
        items:
          $ref: '#/definitions/models.Article'
        type: array
      limit:
        type: integer
      page:
        type: integer
      total:
        type: integer
    type: object
  models.PaginatedLocalizedArticlesResponse:
    properties:
      articles:
        items:
          $ref: '#/definitions/models.LocalizedArticle'
        type: array
      language:
        type: string
      limit:
        type: integer
      page:
        type: integer
      query:
        type: string
      total:
        type: integer
    type: object
  models.PaginatedNotificationsResponse:
    properties:
      limit:
        type: integer
      notifications:
        items:
          $ref: '#/definitions/models.Notification'
        type: array
      page:
        type: integer
      total:
        type: integer
    type: object
  models.PaginatedProcessingJobsResponse:
    properties:
      jobs:
        items:
          $ref: '#/definitions/models.VideoProcessingJobResponse'
        type: array
      pagination:
        $ref: '#/definitions/models.PaginationInfo'
    type: object
  models.PaginatedResponse:
    properties:
      data: {}
      hasNext:
        type: boolean
      hasPrev:
        type: boolean
      limit:
        type: integer
      page:
        type: integer
      totalItems:
        type: integer
      totalPages:
        type: integer
    type: object
  models.PaginationInfo:
    properties:
      current_page:
        type: integer
      per_page:
        type: integer
      total:
        type: integer
      total_pages:
        type: integer
    type: object
  models.ProcessAgentTaskResponse:
    properties:
      error_msg:
        type: string
      processed_at:
        type: string
      progress:
        type: integer
      result:
        additionalProperties: true
        type: object
      status:
        type: string
      task_id:
        type: integer
    type: object
  models.ProcessingJobResponse:
    properties:
      job_id:
        type: integer
      message:
        type: string
      status:
        type: string
      video_id:
        type: integer
    type: object
  models.QuizQuestion:
    properties:
      correct_answer:
        type: integer
      options:
        items:
          type: string
        type: array
      points:
        type: integer
      question:
        type: string
      type:
        description: single, multiple, text
        type: string
    type: object
  models.RelatedArticle:
    properties:
      article:
        allOf:
        - $ref: '#/definitions/models.Article'
        description: Relations
      article_id:
        type: integer
      id:
        type: integer
      related:
        $ref: '#/definitions/models.Article'
      related_id:
        type: integer
      score:
        description: Relevance score
        type: integer
      type:
        description: auto, manual
        type: string
    type: object
  models.SemanticSearchMeta:
    properties:
      index_used:
        type: string
      processing_time:
        type: string
      query_embedding:
        description: Whether embeddings were generated
        type: boolean
      rate_limit_reason:
        description: Reason for rate limiting (if any)
        type: string
    type: object
  models.SemanticSearchResponse:
    properties:
      meta:
        $ref: '#/definitions/models.SemanticSearchMeta'
      method:
        description: '"vector" or "fallback"'
        type: string
      query:
        type: string
      results:
        items:
          $ref: '#/definitions/models.SemanticSearchResult'
        type: array
      total:
        type: integer
    type: object
  models.SemanticSearchResult:
    properties:
      id:
        type: string
      lang:
        type: string
      published_at:
        type: string
      region:
        type: string
      score:
        type: number
      summary:
        type: string
      title:
        type: string
    type: object
  models.Setting:
    properties:
      created_at:
        type: string
      description:
        type: string
      group:
        type: string
      id:
        type: integer
      is_public:
        type: boolean
      key:
        type: string
      type:
        type: string
      updated_at:
        type: string
      value:
        type: string
    type: object
  models.Subscription:
    properties:
      category:
        $ref: '#/definitions/models.Category'
      category_id:
        type: integer
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      is_active:
        type: boolean
      tag:
        $ref: '#/definitions/models.Tag'
      tag_id:
        type: integer
      token:
        type: string
      type:
        description: newsletter, notifications, category
        type: string
      updated_at:
        type: string
      user:
        allOf:
        - $ref: '#/definitions/models.User'
        description: Relations
      user_id:
        type: integer
    type: object
  models.SuccessResponse:
    properties:
      message:
        type: string
    type: object
  models.SummarizeContentRequest:
    properties:
      content:
        type: string
      language:
        description: tr, en
        type: string
      length:
        description: short, medium, long
        type: string
      style:
        description: bullet, paragraph, highlight
        type: string
    required:
    - content
    type: object
  models.SummarizeContentResponse:
    properties:
      key_points:
        items:
          type: string
        type: array
      reduction:
        description: percentage reduction
        type: number
      summary:
        type: string
      word_count:
        type: integer
    type: object
  models.Tag:
    properties:
      articles:
        description: Relations
        items:
          $ref: '#/definitions/models.Article'
        type: array
      color:
        type: string
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      slug:
        type: string
      updated_at:
        type: string
      usage_count:
        type: integer
    type: object
  models.TagSuggestion:
    properties:
      confidence:
        type: number
      name:
        type: string
      relevance:
        description: high, medium, low
        type: string
    type: object
  models.TranslationProgress:
    properties:
      available_languages:
        items:
          type: string
        type: array
      completion_rate:
        type: number
      entity_type:
        type: string
      pending_count:
        type: integer
      total_entities:
        type: integer
      translated_count:
        type: integer
    type: object
  models.TranslationQueue:
    properties:
      created_at:
        type: string
      entity_id:
        type: integer
      entity_type:
        type: string
      error_message:
        type: string
      id:
        type: integer
      priority:
        type: integer
      source_lang:
        type: string
      status:
        type: string
      target_lang:
        type: string
      updated_at:
        type: string
    type: object
  models.TranslationStats:
    properties:
      article_id:
        type: integer
      available_languages:
        items:
          type: string
        type: array
      missing_languages:
        items:
          type: string
        type: array
      pending_translations:
        type: integer
      published_translations:
        type: integer
      total_translations:
        type: integer
    type: object
  models.UpdateAgentTaskRequest:
    properties:
      error_msg:
        type: string
      output_data:
        additionalProperties: true
        type: object
      progress:
        type: integer
      status:
        type: string
    type: object
  models.UpdateUserProfileRequest:
    properties:
      avatar:
        type: string
      bio:
        type: string
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      location:
        type: string
      password:
        description: New password
        type: string
      website:
        type: string
    type: object
  models.User:
    properties:
      article_interactions:
        items:
          $ref: '#/definitions/models.UserArticleInteraction'
        type: array
      articles:
        description: Relations
        items:
          $ref: '#/definitions/models.Article'
        type: array
      avatar:
        type: string
      bio:
        type: string
      bookmarks:
        items:
          $ref: '#/definitions/models.Bookmark'
        type: array
      comments:
        items:
          $ref: '#/definitions/models.Comment'
        type: array
      created_at:
        type: string
      email:
        type: string
      first_name:
        type: string
      followers:
        items:
          $ref: '#/definitions/models.Follow'
        type: array
      following:
        items:
          $ref: '#/definitions/models.Follow'
        type: array
      id:
        type: integer
      is_verified:
        type: boolean
      last_login_at:
        type: string
      last_name:
        type: string
      location:
        type: string
      role:
        type: string
      status:
        type: string
      subscriptions:
        items:
          $ref: '#/definitions/models.Subscription'
        type: array
      updated_at:
        type: string
      username:
        type: string
      votes:
        items:
          $ref: '#/definitions/models.Vote'
        type: array
      website:
        type: string
    type: object
  models.UserArticleInteraction:
    properties:
      article:
        $ref: '#/definitions/models.Article'
      article_id:
        type: integer
      completion_rate:
        description: Percentage of article read (0.0 - 1.0)
        type: number
      created_at:
        type: string
      duration:
        description: Reading duration in seconds (for view interactions)
        type: integer
      id:
        type: integer
      interaction_type:
        description: view, bookmark, upvote, downvote, share, comment
        type: string
      ip_address:
        description: IPv4/IPv6 address
        type: string
      platform:
        description: web, mobile, app
        type: string
      referrer_url:
        description: How user found the article
        type: string
      updated_at:
        type: string
      user:
        allOf:
        - $ref: '#/definitions/models.User'
        description: Relations
      user_agent:
        description: Browser/device info
        type: string
      user_id:
        type: integer
    type: object
  models.UserProfileResponse:
    properties:
      avatar:
        type: string
      bio:
        type: string
      created_at:
        type: string
      first_name:
        type: string
      follower_count:
        type: integer
      following_count:
        type: integer
      id:
        type: integer
      last_name:
        type: string
      location:
        type: string
      recent_articles:
        items:
          $ref: '#/definitions/models.Article'
        type: array
      role:
        type: string
      username:
        type: string
      website:
        type: string
    type: object
  models.Video:
    properties:
      ai_confidence:
        type: number
      ai_generated:
        description: AI and content analysis
        type: boolean
      category:
        $ref: '#/definitions/models.Category'
      category_id:
        description: Content metadata
        type: integer
      comment_count:
        type: integer
      comments:
        description: Relations
        items:
          $ref: '#/definitions/models.VideoComment'
        type: array
      content_warning:
        type: string
      created_at:
        type: string
      description:
        type: string
      dislike_count:
        type: integer
      duration:
        description: Duration in seconds
        type: integer
      file_size:
        type: integer
      id:
        type: integer
      is_featured:
        type: boolean
      is_generated:
        description: AI-generated content
        type: boolean
      is_public:
        type: boolean
      like_count:
        type: integer
      published_at:
        description: Timestamps
        type: string
      resolution:
        description: e.g., "1080x1920"
        type: string
      share_count:
        type: integer
      status:
        description: Status and moderation (reusing existing patterns)
        type: string
      tags:
        description: JSON array of tags
        type: string
      thumbnail_url:
        type: string
      title:
        type: string
      updated_at:
        type: string
      user:
        $ref: '#/definitions/models.User'
      user_id:
        description: User and ownership
        type: integer
      video_url:
        description: File information
        type: string
      view_count:
        description: Engagement metrics
        type: integer
      views:
        items:
          $ref: '#/definitions/models.VideoView'
        type: array
      votes:
        items:
          $ref: '#/definitions/models.VideoVote'
        type: array
    type: object
  models.VideoComment:
    properties:
      ai_confidence:
        type: number
      ai_moderated:
        description: AI moderation
        type: boolean
      content:
        type: string
      created_at:
        description: Timestamps
        type: string
      dislike_count:
        type: integer
      edited_at:
        type: string
      id:
        type: integer
      is_edited:
        type: boolean
      like_count:
        description: Engagement
        type: integer
      parent:
        $ref: '#/definitions/models.VideoComment'
      parent_id:
        description: Nested comments (reusing existing pattern)
        type: integer
      replies:
        items:
          $ref: '#/definitions/models.VideoComment'
        type: array
      status:
        description: Moderation (reusing existing patterns)
        type: string
      toxicity_score:
        type: number
      updated_at:
        type: string
      user:
        $ref: '#/definitions/models.User'
      user_id:
        type: integer
      video:
        $ref: '#/definitions/models.Video'
      video_id:
        type: integer
      votes:
        description: Relations
        items:
          $ref: '#/definitions/models.VideoCommentVote'
        type: array
    type: object
  models.VideoCommentVote:
    properties:
      comment:
        $ref: '#/definitions/models.VideoComment'
      comment_id:
        type: integer
      created_at:
        type: string
      id:
        type: integer
      type:
        type: string
      updated_at:
        type: string
      user:
        $ref: '#/definitions/models.User'
      user_id:
        type: integer
    type: object
  models.VideoProcessingJobResponse:
    properties:
      completed_at:
        description: Unix timestamp
        type: integer
      created_at:
        description: Unix timestamp
        type: integer
      error_msg:
        type: string
      id:
        type: integer
      job_type:
        type: string
      last_updated_at:
        description: Unix timestamp
        type: integer
      progress:
        type: integer
      started_at:
        description: Unix timestamp
        type: integer
      status:
        type: string
      video_id:
        type: integer
      video_title:
        type: string
    type: object
  models.VideoProcessingOptions:
    properties:
      ai_analysis:
        description: Enable AI content analysis
        type: boolean
      auto_publish:
        description: Auto-publish after processing
        type: boolean
      formats:
        description: Output formats
        items:
          type: string
        type: array
      generate_thumbs:
        description: Generate thumbnail images
        type: boolean
      moderation:
        description: Enable content moderation
        type: boolean
      priority:
        description: Processing priority
        enum:
        - low
        - normal
        - high
        - urgent
        type: string
      quality:
        description: Target quality
        enum:
        - 720p
        - 1080p
        - 1440p
        - 4k
        type: string
      webhooks:
        description: Callback URLs
        items:
          type: string
        type: array
    type: object
  models.VideoProcessingStatusResponse:
    properties:
      last_processed_at:
        description: Unix timestamp
        type: integer
      processing_error:
        type: string
      processing_jobs:
        items:
          $ref: '#/definitions/models.VideoProcessingJobResponse'
        type: array
      processing_progress:
        type: integer
      processing_status:
        type: string
      thumbnail_url:
        type: string
      video_id:
        type: integer
    type: object
  models.VideoView:
    properties:
      created_at:
        description: Timestamps
        type: string
      duration:
        description: How long the video was watched (seconds)
        type: integer
      id:
        type: integer
      ip_address:
        description: View metadata
        type: string
      updated_at:
        type: string
      user:
        $ref: '#/definitions/models.User'
      user_agent:
        type: string
      user_id:
        description: Nullable for anonymous views
        type: integer
      video:
        $ref: '#/definitions/models.Video'
      video_id:
        type: integer
      watch_percent:
        description: Percentage of video watched
        type: number
    type: object
  models.VideoVote:
    properties:
      created_at:
        type: string
      id:
        type: integer
      type:
        type: string
      updated_at:
        type: string
      user:
        $ref: '#/definitions/models.User'
      user_id:
        type: integer
      video:
        $ref: '#/definitions/models.Video'
      video_id:
        type: integer
    type: object
  models.Vote:
    properties:
      article:
        $ref: '#/definitions/models.Article'
      article_id:
        type: integer
      comment:
        $ref: '#/definitions/models.Comment'
      comment_id:
        type: integer
      created_at:
        type: string
      id:
        type: integer
      type:
        description: like, dislike
        type: string
      user:
        allOf:
        - $ref: '#/definitions/models.User'
        description: Relations
      user_id:
        type: integer
    type: object
  models.VoteRequest:
    properties:
      type:
        description: like or dislike
        enum:
        - like
        - dislike
        type: string
    required:
    - type
    type: object
  models.VoteResponse:
    properties:
      dislikes:
        type: integer
      likes:
        type: integer
    type: object
  queue.JobStatus:
    enum:
    - pending
    - processing
    - completed
    - failed
    - retrying
    type: string
    x-enum-varnames:
    - JobStatusPending
    - JobStatusProcessing
    - JobStatusCompleted
    - JobStatusFailed
    - JobStatusRetrying
  queue.JobStatusInfo:
    properties:
      attempts:
        type: integer
      completed_at:
        type: integer
      created_at:
        type: integer
      error_msg:
        type: string
      id:
        type: string
      max_attempts:
        type: integer
      payload:
        additionalProperties: true
        type: object
      priority:
        type: integer
      scheduled_at:
        type: integer
      started_at:
        type: integer
      status:
        type: string
      type:
        type: string
    type: object
  queue.QueueStats:
    properties:
      completed_jobs:
        type: integer
      dead_jobs:
        type: integer
      failed_jobs:
        type: integer
      last_processed:
        type: string
      pending_jobs:
        type: integer
      processing_jobs:
        type: integer
      queue_name:
        type: string
      worker_count:
        type: integer
    type: object
  services.CreatePageBlockRequest:
    properties:
      block_type:
        type: string
      container_id:
        type: integer
      container_type:
        type: string
      content:
        type: string
      grid_settings:
        additionalProperties: true
        type: object
      is_container:
        type: boolean
      is_visible:
        type: boolean
      page_id:
        type: integer
      position:
        type: integer
      responsive_data:
        additionalProperties: true
        type: object
      settings:
        additionalProperties: true
        type: object
      styles:
        additionalProperties: true
        type: object
    type: object
  services.CreatePageRequest:
    properties:
      author_id:
        type: integer
      content_blocks:
        items:
          $ref: '#/definitions/services.CreatePageBlockRequest'
        type: array
      excerpt_text:
        type: string
      featured_image:
        type: string
      is_homepage:
        type: boolean
      is_landing_page:
        type: boolean
      language:
        type: string
      layout:
        type: string
      layout_data:
        additionalProperties: true
        type: object
      meta_description:
        type: string
      meta_title:
        type: string
      page_settings:
        additionalProperties: true
        type: object
      parent_id:
        type: integer
      seo_settings:
        additionalProperties: true
        type: object
      slug:
        type: string
      sort_order:
        type: integer
      status:
        type: string
      template:
        type: string
      title:
        type: string
    type: object
  services.DuplicateBlockRequest:
    properties:
      new_position:
        type: integer
      target_container_id:
        type: integer
      target_page_id:
        type: integer
    type: object
  services.PaginatedPagesResponse:
    properties:
      limit:
        type: integer
      page:
        type: integer
      pages:
        items:
          $ref: '#/definitions/models.Page'
        type: array
      total:
        type: integer
      total_pages:
        type: integer
    type: object
  services.UpdatePageBlockRequest:
    properties:
      block_type:
        type: string
      container_type:
        type: string
      content:
        type: string
      grid_settings:
        additionalProperties: true
        type: object
      is_container:
        type: boolean
      is_visible:
        type: boolean
      position:
        type: integer
      responsive_data:
        additionalProperties: true
        type: object
      settings:
        additionalProperties: true
        type: object
      styles:
        additionalProperties: true
        type: object
    type: object
  services.UpdatePageRequest:
    properties:
      excerpt_text:
        type: string
      featured_image:
        type: string
      language:
        type: string
      layout:
        type: string
      layout_data:
        additionalProperties: true
        type: object
      meta_description:
        type: string
      meta_title:
        type: string
      page_settings:
        additionalProperties: true
        type: object
      parent_id:
        type: integer
      seo_settings:
        additionalProperties: true
        type: object
      sort_order:
        type: integer
      status:
        type: string
      template:
        type: string
      title:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is a comprehensive CRUD API for a news blog platform with advanced
    authentication and real-time features - UPDATED!
  title: News Blog API
  version: "1.0"
paths:
  /2fa/disable:
    post:
      consumes:
      - application/json
      description: Disable 2FA by verifying the TOTP code
      parameters:
      - description: TOTP or backup code verification
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.Verify2FARequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Disable Two-Factor Authentication
      tags:
      - Two-Factor Authentication
  /2fa/enable:
    post:
      consumes:
      - application/json
      description: Enable 2FA by verifying the TOTP code from authenticator app
      parameters:
      - description: TOTP verification
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.Setup2FARequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Enable Two-Factor Authentication
      tags:
      - Two-Factor Authentication
  /2fa/setup:
    post:
      description: Generate TOTP secret and QR code for 2FA setup
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.Setup2FAResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Setup Two-Factor Authentication
      tags:
      - Two-Factor Authentication
  /2fa/status:
    get:
      description: Get the current 2FA status for the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get Two-Factor Authentication Status
      tags:
      - Two-Factor Authentication
  /2fa/verify:
    post:
      consumes:
      - application/json
      description: Verify TOTP code or backup code for 2FA
      parameters:
      - description: TOTP or backup code verification
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.Verify2FARequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Verify Two-Factor Authentication
      tags:
      - Two-Factor Authentication
  /admin/analytics/comparison:
    get:
      description: Get comparative analytics between articles and videos
      parameters:
      - default: month
        description: 'Timeframe: day, week, month, all'
        in: query
        name: timeframe
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Compare articles vs videos performance
      tags:
      - Unified Analytics
  /admin/analytics/dashboard:
    get:
      description: Get comprehensive analytics across articles and videos
      parameters:
      - default: week
        description: 'Timeframe: day, week, month, all'
        in: query
        name: timeframe
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get unified analytics dashboard
      tags:
      - Unified Analytics
  /admin/analytics/user-engagement:
    get:
      description: Get detailed user engagement metrics across content types
      parameters:
      - default: month
        description: 'Timeframe: day, week, month, all'
        in: query
        name: timeframe
        type: string
      - description: Filter by specific user ID
        in: query
        name: user_id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user engagement report
      tags:
      - Unified Analytics
  /admin/articles:
    post:
      consumes:
      - application/json
      description: Add a new article to the database
      parameters:
      - description: Article data
        in: body
        name: article
        required: true
        schema:
          $ref: '#/definitions/models.Article'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Article'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new article
      tags:
      - Articles
  /admin/articles/{id}:
    delete:
      description: Delete an article by ID (admin only)
      parameters:
      - description: Article ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete an article
      tags:
      - Articles
    put:
      consumes:
      - application/json
      description: Update an existing article in the database (admin only)
      parameters:
      - description: Article ID
        in: path
        name: id
        required: true
        type: integer
      - description: Article data
        in: body
        name: article
        required: true
        schema:
          $ref: '#/definitions/models.Article'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Article'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update an article
      tags:
      - Articles
  /admin/breaking-news:
    post:
      consumes:
      - application/json
      description: Creates a new breaking news banner
      parameters:
      - description: Breaking news banner info
        in: body
        name: breakingNews
        required: true
        schema:
          $ref: '#/definitions/models.BreakingNewsBanner'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.BreakingNewsBanner'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Create breaking news banner
      tags:
      - Breaking News
  /admin/breaking-news/{id}:
    delete:
      description: Deletes a breaking news banner
      parameters:
      - description: Breaking news banner ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Delete breaking news banner
      tags:
      - Breaking News
    put:
      consumes:
      - application/json
      description: Updates an existing breaking news banner
      parameters:
      - description: Breaking news banner ID
        in: path
        name: id
        required: true
        type: integer
      - description: Breaking news banner updated info
        in: body
        name: breakingNews
        required: true
        schema:
          $ref: '#/definitions/models.BreakingNewsBanner'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.BreakingNewsBanner'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Update breaking news banner
      tags:
      - Breaking News
  /admin/cache/clear:
    delete:
      description: Clear all cache layers (L1 Ristretto + L2 Redis)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Clear cache
      tags:
      - Admin
  /admin/cache/warm:
    post:
      description: Preload cache with popular articles, categories, and tags
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Warm cache
      tags:
      - Admin
  /admin/categories:
    post:
      consumes:
      - application/json
      description: Create a new article category with cache invalidation (admin only)
      parameters:
      - description: Category data
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/models.Category'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Category'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Create a new category
      tags:
      - Categories
  /admin/categories/{id}:
    delete:
      description: Soft delete a category with cache invalidation (admin only)
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Delete a category
      tags:
      - Categories
    put:
      consumes:
      - application/json
      description: Update an existing category with cache invalidation (admin only)
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      - description: Category data
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/models.Category'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Category'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Update a category
      tags:
      - Categories
  /admin/live-news:
    post:
      consumes:
      - application/json
      description: Creates a new live news stream
      parameters:
      - description: Live news stream info
        in: body
        name: stream
        required: true
        schema:
          $ref: '#/definitions/models.LiveNewsStream'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.LiveNewsStream'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Create live news stream
      tags:
      - Live News
  /admin/live-news/{id}:
    delete:
      description: Deletes a live news stream
      parameters:
      - description: Stream ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Delete live news stream
      tags:
      - Live News
    put:
      consumes:
      - application/json
      description: Updates an existing live news stream
      parameters:
      - description: Stream ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated stream info
        in: body
        name: stream
        required: true
        schema:
          $ref: '#/definitions/models.LiveNewsStream'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LiveNewsStream'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Update live news stream
      tags:
      - Live News
  /admin/live-news/{id}/updates:
    post:
      consumes:
      - application/json
      description: Adds a new update to an existing live news stream
      parameters:
      - description: Stream ID
        in: path
        name: id
        required: true
        type: integer
      - description: Live news update info
        in: body
        name: update
        required: true
        schema:
          $ref: '#/definitions/models.LiveNewsUpdate'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.LiveNewsUpdate'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Add update to live news stream
      tags:
      - Live News
  /admin/media/stats:
    get:
      description: Get statistics about uploaded media (admin only)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Get media statistics
      tags:
      - Media
  /admin/menu-items:
    post:
      consumes:
      - application/json
      description: Create a new menu item (admin only)
      parameters:
      - description: Menu item data
        in: body
        name: item
        required: true
        schema:
          $ref: '#/definitions/models.MenuItem'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.MenuItem'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Create a new menu item
      tags:
      - MenuItem
  /admin/menu-items/{id}:
    delete:
      description: Soft delete a menu item and all its children (admin only)
      parameters:
      - description: Menu Item ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Delete a menu item
      tags:
      - MenuItem
    put:
      consumes:
      - application/json
      description: Update an existing menu item (admin only)
      parameters:
      - description: Menu Item ID
        in: path
        name: id
        required: true
        type: integer
      - description: Menu item data
        in: body
        name: item
        required: true
        schema:
          $ref: '#/definitions/models.MenuItem'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MenuItem'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Update a menu item
      tags:
      - MenuItem
  /admin/menu-items/reorder:
    put:
      consumes:
      - application/json
      description: Update sort order for multiple menu items (admin only)
      parameters:
      - description: Array of items with id and sort_order
        in: body
        name: items
        required: true
        schema:
          items:
            additionalProperties: true
            type: object
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Reorder menu items
      tags:
      - MenuItem
  /admin/menus:
    post:
      consumes:
      - application/json
      description: Create a new navigation menu (admin only)
      parameters:
      - description: Menu data
        in: body
        name: menu
        required: true
        schema:
          $ref: '#/definitions/models.Menu'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Menu'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Create a new menu
      tags:
      - Menu
  /admin/menus/{id}:
    delete:
      description: Soft delete a menu and all its items (admin only)
      parameters:
      - description: Menu ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Delete a menu
      tags:
      - Menu
    put:
      consumes:
      - application/json
      description: Update an existing menu (admin only)
      parameters:
      - description: Menu ID
        in: path
        name: id
        required: true
        type: integer
      - description: Menu data
        in: body
        name: menu
        required: true
        schema:
          $ref: '#/definitions/models.Menu'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Menu'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Update a menu
      tags:
      - Menu
  /admin/news-stories:
    post:
      consumes:
      - application/json
      description: Creates a new news story
      parameters:
      - description: News story info
        in: body
        name: story
        required: true
        schema:
          $ref: '#/definitions/models.NewsStory'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.NewsStory'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Create news story
      tags:
      - News Stories
  /admin/news-stories/{id}:
    delete:
      description: Deletes a news story
      parameters:
      - description: Story ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Delete news story
      tags:
      - News Stories
    put:
      consumes:
      - application/json
      description: Updates an existing news story
      parameters:
      - description: Story ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated story info
        in: body
        name: story
        required: true
        schema:
          $ref: '#/definitions/models.NewsStory'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.NewsStory'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Update news story
      tags:
      - News Stories
  /admin/newsletters:
    get:
      description: Retrieve all newsletters with pagination
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      - description: Filter by status (draft, scheduled, sent)
        in: query
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get all newsletters
      tags:
      - Newsletter
    post:
      consumes:
      - application/json
      description: Create a new newsletter campaign (admin only)
      parameters:
      - description: Newsletter data
        in: body
        name: newsletter
        required: true
        schema:
          $ref: '#/definitions/models.Newsletter'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Newsletter'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Create a new newsletter
      tags:
      - Newsletter
  /admin/newsletters/{id}:
    delete:
      description: Soft delete a newsletter (admin only)
      parameters:
      - description: Newsletter ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Delete a newsletter
      tags:
      - Newsletter
    get:
      description: Retrieve a single newsletter by its ID
      parameters:
      - description: Newsletter ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Newsletter'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get newsletter by ID
      tags:
      - Newsletter
    put:
      consumes:
      - application/json
      description: Update an existing newsletter (admin only)
      parameters:
      - description: Newsletter ID
        in: path
        name: id
        required: true
        type: integer
      - description: Newsletter data
        in: body
        name: newsletter
        required: true
        schema:
          $ref: '#/definitions/models.Newsletter'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Newsletter'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Update a newsletter
      tags:
      - Newsletter
  /admin/newsletters/{id}/send:
    post:
      description: Send a newsletter immediately (admin only)
      parameters:
      - description: Newsletter ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Newsletter'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Send a newsletter
      tags:
      - Newsletter
  /admin/page-blocks/{id}:
    delete:
      description: Delete a content block by ID
      parameters:
      - description: Block ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a page content block
      tags:
      - Page Content Blocks
    get:
      description: Retrieve a content block by ID
      parameters:
      - description: Block ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PageContentBlock'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get a page content block
      tags:
      - Page Content Blocks
    put:
      consumes:
      - application/json
      description: Update an existing content block
      parameters:
      - description: Block ID
        in: path
        name: id
        required: true
        type: integer
      - description: Content block data
        in: body
        name: block
        required: true
        schema:
          $ref: '#/definitions/services.UpdatePageBlockRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PageContentBlock'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a page content block
      tags:
      - Page Content Blocks
  /admin/page-blocks/{id}/duplicate:
    post:
      description: Create a copy of an existing content block
      parameters:
      - description: Block ID
        in: path
        name: id
        required: true
        type: integer
      - description: Duplication options
        in: body
        name: request
        schema:
          $ref: '#/definitions/services.DuplicateBlockRequest'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.PageContentBlock'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Duplicate a page content block
      tags:
      - Page Content Blocks
  /admin/page-blocks/validate:
    post:
      consumes:
      - application/json
      description: Validate content block data
      parameters:
      - description: Content block data
        in: body
        name: block
        required: true
        schema:
          $ref: '#/definitions/services.CreatePageBlockRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Validate a page content block
      tags:
      - Page Content Blocks
  /admin/pages:
    post:
      consumes:
      - application/json
      description: Create a new page with content blocks
      parameters:
      - description: Page data
        in: body
        name: page
        required: true
        schema:
          $ref: '#/definitions/services.CreatePageRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Page'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new page
      tags:
      - Pages
  /admin/pages/{id}:
    delete:
      description: Delete a page by ID
      parameters:
      - description: Page ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a page
      tags:
      - Pages
    put:
      consumes:
      - application/json
      description: Update an existing page
      parameters:
      - description: Page ID
        in: path
        name: id
        required: true
        type: integer
      - description: Page data
        in: body
        name: page
        required: true
        schema:
          $ref: '#/definitions/services.UpdatePageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Page'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a page
      tags:
      - Pages
  /admin/pages/{id}/blocks:
    post:
      consumes:
      - application/json
      description: Create a new content block for a page
      parameters:
      - description: Page ID
        in: path
        name: id
        required: true
        type: integer
      - description: Content block data
        in: body
        name: block
        required: true
        schema:
          $ref: '#/definitions/services.CreatePageBlockRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.PageContentBlock'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a page content block
      tags:
      - Page Content Blocks
  /admin/pages/{id}/duplicate:
    post:
      description: Create a copy of an existing page
      parameters:
      - description: Page ID
        in: path
        name: id
        required: true
        type: integer
      - description: Title for the duplicated page
        in: query
        name: title
        type: string
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Page'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Duplicate a page
      tags:
      - Pages
  /admin/pages/{id}/publish:
    post:
      description: Change page status to published
      parameters:
      - description: Page ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Page'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Publish a page
      tags:
      - Pages
  /admin/pages/{id}/unpublish:
    post:
      description: Change page status to draft
      parameters:
      - description: Page ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Page'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Unpublish a page
      tags:
      - Pages
  /admin/queue/enqueue:
    post:
      consumes:
      - application/json
      description: Manually enqueue a job to a specific queue for testing or administrative
        purposes
      parameters:
      - description: Job details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.EnqueueJobRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Enqueue a job
      tags:
      - Queue
  /admin/queue/health:
    get:
      description: Get health and operational status of all Redis queues
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.QueueHealthResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get queue health status
      tags:
      - Queue
  /admin/queue/jobs:
    get:
      description: Get jobs from a specific queue with pagination and filtering
      parameters:
      - description: Queue name (translations, video_processing, agent_tasks, general)
        in: query
        name: queue
        required: true
        type: string
      - description: Filter by status (pending, processing, completed, failed, retrying)
        in: query
        name: status
        type: string
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.QueueJobsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get queue jobs
      tags:
      - Queue
  /admin/queue/jobs/{id}:
    delete:
      description: Delete a job from the queue (only completed, failed, or dead jobs)
      parameters:
      - description: Job ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a queue job
      tags:
      - Queue
    get:
      description: Get detailed information about a specific job by ID
      parameters:
      - description: Job ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/queue.JobStatus'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get queue job details
      tags:
      - Queue
  /admin/queue/jobs/{id}/retry:
    post:
      description: Retry a failed job by moving it back to pending status
      parameters:
      - description: Job ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Retry a failed job
      tags:
      - Queue
  /admin/queue/jobs/cleanup:
    post:
      description: Remove completed jobs older than specified hours (default 24h)
      parameters:
      - default: 24
        description: Hours old to cleanup
        in: query
        name: hours
        type: integer
      - description: Specific queue to cleanup (optional)
        in: query
        name: queue
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Cleanup completed jobs
      tags:
      - Queue
  /admin/queue/stats:
    get:
      description: Get real-time statistics for all Redis queues including pending,
        processing, completed, and failed job counts
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.QueueStatsResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get queue statistics
      tags:
      - Queue
  /admin/settings:
    post:
      consumes:
      - application/json
      description: Create a new system setting (admin only)
      parameters:
      - description: Setting data
        in: body
        name: setting
        required: true
        schema:
          $ref: '#/definitions/models.Setting'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Setting'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Create a new setting
      tags:
      - Settings
  /admin/settings/{id}:
    delete:
      description: Soft delete a setting (admin only)
      parameters:
      - description: Setting ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Delete a setting
      tags:
      - Settings
    put:
      consumes:
      - application/json
      description: Update an existing setting (admin only)
      parameters:
      - description: Setting ID
        in: path
        name: id
        required: true
        type: integer
      - description: Setting data
        in: body
        name: setting
        required: true
        schema:
          $ref: '#/definitions/models.Setting'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Setting'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Update a setting
      tags:
      - Settings
  /admin/settings/bulk:
    put:
      consumes:
      - application/json
      description: Update multiple settings at once (admin only)
      parameters:
      - description: Map of setting keys to values
        in: body
        name: settings
        required: true
        schema:
          additionalProperties:
            type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Bulk update settings
      tags:
      - Settings
  /admin/settings/key/{key}:
    put:
      consumes:
      - application/json
      description: Update a setting value by its key (admin only)
      parameters:
      - description: Setting key
        in: path
        name: key
        required: true
        type: string
      - description: Setting value
        in: body
        name: data
        required: true
        schema:
          additionalProperties: true
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Setting'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Update setting by key
      tags:
      - Settings
  /admin/tags:
    post:
      consumes:
      - application/json
      description: Create a new article tag with cache invalidation (admin only)
      parameters:
      - description: Tag data
        in: body
        name: tag
        required: true
        schema:
          $ref: '#/definitions/models.Tag'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Tag'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Create a new tag
      tags:
      - Tags
  /admin/tags/{id}:
    delete:
      description: Soft delete a tag with cache invalidation (admin only)
      parameters:
      - description: Tag ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Delete a tag
      tags:
      - Tags
    put:
      consumes:
      - application/json
      description: Update an existing tag with cache invalidation (admin only)
      parameters:
      - description: Tag ID
        in: path
        name: id
        required: true
        type: integer
      - description: Tag data
        in: body
        name: tag
        required: true
        schema:
          $ref: '#/definitions/models.Tag'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Tag'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Update a tag
      tags:
      - Tags
  /admin/translations/{entity_type}/{entity_id}:
    post:
      consumes:
      - application/json
      description: Translate a single entity to specified languages
      parameters:
      - description: Entity type (article, category, tag, menu, notification)
        in: path
        name: entity_type
        required: true
        type: string
      - description: Entity ID
        in: path
        name: entity_id
        required: true
        type: integer
      - description: Target languages
        in: body
        name: languages
        required: true
        schema:
          items:
            type: string
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Translate single entity
      tags:
      - Translation
  /admin/translations/bulk:
    post:
      consumes:
      - application/json
      description: Queue bulk translation jobs for specified content
      parameters:
      - description: Bulk translation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.BulkTranslationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.BulkTranslationResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Bulk translate content
      tags:
      - Translation
  /admin/translations/process:
    post:
      description: Manually trigger processing of pending translation jobs
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Process translation queue
      tags:
      - Translation
  /admin/translations/progress:
    get:
      description: Get translation progress for all content types and languages
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.TranslationProgress'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Get translation progress
      tags:
      - Translation
  /admin/translations/queue:
    get:
      description: Get pending and processing translation jobs
      parameters:
      - description: Filter by status (pending, processing, completed, failed)
        in: query
        name: status
        type: string
      - description: Filter by entity type
        in: query
        name: entity_type
        type: string
      - default: 50
        description: Limit results
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.TranslationQueue'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Get translation queue
      tags:
      - Translation
  /admin/translations/test:
    get:
      description: Test endpoint for checking translation system functionality
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Test translation system
      tags:
      - Translation
  /admin/video-analytics/all:
    get:
      description: Get comprehensive analytics across all videos in the system
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Items per page
        in: query
        name: limit
        type: integer
      - default: views
        description: 'Sort by: views, engagement, created_at'
        in: query
        name: sort
        type: string
      - default: desc
        description: 'Order: asc, desc'
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get analytics for all videos (admin)
      tags:
      - Admin - Video Analytics
  /admin/video-analytics/engagement:
    get:
      description: Get engagement metrics for video content (admin only)
      parameters:
      - default: week
        description: 'Timeframe: day, week, month'
        in: query
        name: timeframe
        type: string
      - description: Filter by specific video ID
        in: query
        name: video_id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get video engagement statistics
      tags:
      - Video Analytics
  /api/agent/tasks:
    get:
      description: Retrieve user's agent tasks with pagination
      parameters:
      - description: Filter by status
        in: query
        name: status
        type: string
      - description: Filter by task type
        in: query
        name: task_type
        type: string
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PaginatedResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Get Agent Tasks
      tags:
      - Agent
    post:
      consumes:
      - application/json
      description: Create a new automated task for n8n integration
      parameters:
      - description: Agent task creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.CreateAgentTaskRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.AgentTaskResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Create Agent Task
      tags:
      - Agent
  /api/agent/tasks/{id}:
    delete:
      description: Delete an agent task
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Delete Agent Task
      tags:
      - Agent
    get:
      description: Retrieve a specific agent task by ID
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.AgentTaskResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Get Agent Task
      tags:
      - Agent
    put:
      consumes:
      - application/json
      description: Update the status and result of an agent task (for n8n webhook)
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: integer
      - description: Task update request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UpdateAgentTaskRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.AgentTaskResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Update Agent Task
      tags:
      - Agent
  /api/agent/tasks/{id}/process:
    post:
      consumes:
      - application/json
      description: Process an agent task using AI services (for internal use)
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ProcessAgentTaskResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Process Agent Task
      tags:
      - Agent
  /api/ai/categorize:
    post:
      consumes:
      - application/json
      description: Automatically categorize and tag content using AI
      parameters:
      - description: Content categorization request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.CategorizeContentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CategorizeContentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Categorize Content with AI
      tags:
      - AI
  /api/ai/content:
    post:
      consumes:
      - application/json
      description: Generate article content based on topic and parameters using AI
      parameters:
      - description: Content generation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.GenerateContentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GenerateContentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Generate AI Content
      tags:
      - AI
  /api/ai/headlines:
    post:
      consumes:
      - application/json
      description: Generate multiple headline suggestions for given content using
        AI
      parameters:
      - description: Headlines generation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.GenerateHeadlinesRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GenerateHeadlinesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Generate AI Headlines
      tags:
      - AI
  /api/ai/improve:
    post:
      consumes:
      - application/json
      description: Get AI suggestions to improve existing content
      parameters:
      - description: Content improvement request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.ImproveContentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ImproveContentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Improve Content with AI
      tags:
      - AI
  /api/ai/moderate:
    post:
      consumes:
      - application/json
      description: Use AI to moderate content for inappropriate material
      parameters:
      - description: Content moderation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.ModerateContentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ModerateContentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Moderate Content with AI
      tags:
      - AI
  /api/ai/suggestions:
    get:
      description: Retrieve user's AI content suggestions history
      parameters:
      - description: Suggestion type filter
        in: query
        name: type
        type: string
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PaginatedResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Get AI Suggestions History
      tags:
      - AI
  /api/ai/summarize:
    post:
      consumes:
      - application/json
      description: Generate a summary of given content using AI
      parameters:
      - description: Content summarization request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.SummarizeContentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SummarizeContentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Summarize Content with AI
      tags:
      - AI
  /api/ai/usage-stats:
    get:
      description: Retrieve user's AI service usage statistics
      parameters:
      - default: 30
        description: Number of days to include
        in: query
        name: days
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Get AI Usage Statistics
      tags:
      - AI
  /api/articles:
    get:
      description: Retrieve a list of articles with pagination using cached JSON
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Number of items per page (default: 10, max: 50)'
        in: query
        name: limit
        type: integer
      - description: Filter by category
        in: query
        name: category
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PaginatedResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get articles with pagination (Cache Optimized)
      tags:
      - Articles
  /api/articles/{article_id}/blocks/breaking-news:
    post:
      consumes:
      - application/json
      description: Create a breaking news alert banner
      parameters:
      - description: Article ID
        in: path
        name: article_id
        required: true
        type: integer
      - description: Breaking news settings
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateBreakingNewsRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.ArticleContentBlock'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Create a breaking news banner block
      tags:
      - Content Blocks
  /api/articles/{article_id}/blocks/chart:
    post:
      consumes:
      - application/json
      description: Create an interactive chart block with data visualization
      parameters:
      - description: Article ID
        in: path
        name: article_id
        required: true
        type: integer
      - description: Chart data and settings
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateChartRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.ArticleContentBlock'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Create a chart block
      tags:
      - Content Blocks
  /api/articles/{article_id}/blocks/countdown:
    post:
      consumes:
      - application/json
      description: Create a countdown timer block for events
      parameters:
      - description: Article ID
        in: path
        name: article_id
        required: true
        type: integer
      - description: Countdown settings
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateCountdownRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.ArticleContentBlock'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Create a countdown timer block
      tags:
      - Content Blocks
  /api/articles/{article_id}/blocks/embed:
    post:
      consumes:
      - application/json
      description: Automatically create an embed block from a detected URL
      parameters:
      - description: Article ID
        in: path
        name: article_id
        required: true
        type: integer
      - description: URL and embed settings
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateEmbedRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.ArticleContentBlock'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Create embed block from URL
      tags:
      - Content Blocks
  /api/articles/{article_id}/blocks/faq:
    post:
      consumes:
      - application/json
      description: Create a frequently asked questions block
      parameters:
      - description: Article ID
        in: path
        name: article_id
        required: true
        type: integer
      - description: FAQ items and settings
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateFAQRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.ArticleContentBlock'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Create an FAQ block
      tags:
      - Content Blocks
  /api/articles/{article_id}/blocks/map:
    post:
      consumes:
      - application/json
      description: Create an interactive map block with markers
      parameters:
      - description: Article ID
        in: path
        name: article_id
        required: true
        type: integer
      - description: Map coordinates and settings
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateMapRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.ArticleContentBlock'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Create a map block
      tags:
      - Content Blocks
  /api/articles/{article_id}/blocks/news-ticker:
    post:
      consumes:
      - application/json
      description: Create a scrolling news ticker block
      parameters:
      - description: Article ID
        in: path
        name: article_id
        required: true
        type: integer
      - description: News ticker settings
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateNewsTickerRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.ArticleContentBlock'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Create a news ticker block
      tags:
      - Content Blocks
  /api/articles/{article_id}/blocks/newsletter:
    post:
      consumes:
      - application/json
      description: Create a newsletter subscription block
      parameters:
      - description: Article ID
        in: path
        name: article_id
        required: true
        type: integer
      - description: Newsletter settings
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateNewsletterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.ArticleContentBlock'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Create a newsletter signup block
      tags:
      - Content Blocks
  /api/articles/{article_id}/blocks/quiz:
    post:
      consumes:
      - application/json
      description: Create an interactive quiz or poll block
      parameters:
      - description: Article ID
        in: path
        name: article_id
        required: true
        type: integer
      - description: Quiz data and settings
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateQuizRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.ArticleContentBlock'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Create a quiz/poll block
      tags:
      - Content Blocks
  /api/articles/{article_id}/similar:
    get:
      description: Retrieve a list of articles similar to a given article.
      parameters:
      - description: ID of the article to find similar articles for
        in: path
        name: article_id
        required: true
        type: integer
      - default: 5
        description: Number of similar articles to return
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Article'
            type: array
        "400":
          description: If article_id is invalid
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: If the source article is not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: If an internal error occurs
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get similar articles
      tags:
      - Articles
  /api/articles/{id}:
    get:
      description: Retrieve a single article by its ID using cached JSON
      parameters:
      - description: Article ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Article'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get a single article by ID (Cache Optimized)
      tags:
      - Articles
  /api/articles/{id}/analytics:
    get:
      description: Get analytics data for a specific article
      parameters:
      - description: Article ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get article analytics
      tags:
      - Analytics
  /api/articles/{id}/blocks:
    get:
      description: Retrieve all content blocks for a specific article
      parameters:
      - description: Article ID
        in: path
        name: id
        required: true
        type: integer
      - description: Filter by block type
        in: query
        name: type
        type: string
      - description: 'Filter by visibility (default: true)'
        in: query
        name: visible
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ArticleContentBlock'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get content blocks for an article
      tags:
      - Content Blocks
    post:
      consumes:
      - application/json
      description: Add a new content block to an article
      parameters:
      - description: Article ID
        in: path
        name: id
        required: true
        type: integer
      - description: Content block data
        in: body
        name: block
        required: true
        schema:
          $ref: '#/definitions/models.ArticleContentBlock'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.ArticleContentBlock'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Create a new content block
      tags:
      - Content Blocks
    put:
      consumes:
      - application/json
      description: Replace all content blocks for an article
      parameters:
      - description: Article ID
        in: path
        name: id
        required: true
        type: integer
      - description: Content blocks data
        in: body
        name: blocks
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateArticleBlocksRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Update all content blocks for an article
      tags:
      - Content Blocks
  /api/articles/{id}/blocks/card-grid:
    post:
      consumes:
      - application/json
      description: Create a grid layout with cards
      parameters:
      - description: Article ID
        in: path
        name: id
        required: true
        type: integer
      - description: Card grid settings
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateCardGridRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.ArticleContentBlock'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Create a card grid block
      tags:
      - Advanced Content Blocks
  /api/articles/{id}/blocks/comments:
    post:
      consumes:
      - application/json
      description: Create a comments section block
      parameters:
      - description: Article ID
        in: path
        name: id
        required: true
        type: integer
      - description: Comments block settings
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateCommentsRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.ArticleContentBlock'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Create a comments block
      tags:
      - Advanced Content Blocks
  /api/articles/{id}/blocks/hero:
    post:
      consumes:
      - application/json
      description: Create a hero banner with background and CTA buttons
      parameters:
      - description: Article ID
        in: path
        name: id
        required: true
        type: integer
      - description: Hero section settings
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateHeroRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.ArticleContentBlock'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Create a hero section block
      tags:
      - Advanced Content Blocks
  /api/articles/{id}/blocks/product:
    post:
      consumes:
      - application/json
      description: Create a product display block for e-commerce
      parameters:
      - description: Article ID
        in: path
        name: article_id
        required: true
        type: integer
      - description: Product block settings
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateProductRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.ArticleContentBlock'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Create a product showcase block
      tags:
      - Advanced Content Blocks
  /api/articles/{id}/blocks/rating:
    post:
      consumes:
      - application/json
      description: Create a rating and review block
      parameters:
      - description: Article ID
        in: path
        name: article_id
        required: true
        type: integer
      - description: Rating block settings
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateRatingRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.ArticleContentBlock'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Create a rating/review block
      tags:
      - Advanced Content Blocks
  /api/articles/{id}/blocks/reorder:
    post:
      consumes:
      - application/json
      description: Update the position of multiple content blocks
      parameters:
      - description: Article ID
        in: path
        name: article_id
        required: true
        type: integer
      - description: Block positions
        in: body
        name: blocks
        required: true
        schema:
          $ref: '#/definitions/dto.ReorderBlocksRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Reorder content blocks
      tags:
      - Content Blocks
  /api/articles/{id}/blocks/search:
    post:
      consumes:
      - application/json
      description: Create a search interface block
      parameters:
      - description: Article ID
        in: path
        name: article_id
        required: true
        type: integer
      - description: Search block settings
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateSearchRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.ArticleContentBlock'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Create a search block
      tags:
      - Advanced Content Blocks
  /api/articles/{id}/blocks/social-feed:
    post:
      consumes:
      - application/json
      description: Create a live social media feed block
      parameters:
      - description: Article ID
        in: path
        name: id
        required: true
        type: integer
      - description: Social feed settings
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateSocialFeedRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.ArticleContentBlock'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Create a social media feed block
      tags:
      - Advanced Content Blocks
  /api/articles/{id}/interactions:
    post:
      consumes:
      - application/json
      description: Record a user's interaction with an article (view, bookmark, vote,
        etc.)
      parameters:
      - description: Article ID
        in: path
        name: id
        required: true
        type: integer
      - description: Interaction data
        in: body
        name: interaction
        required: true
        schema:
          $ref: '#/definitions/handlers.RecordInteractionRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.UserArticleInteraction'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Record user interaction with article
      tags:
      - Analytics
  /api/articles/{id}/migrate-to-blocks:
    post:
      description: Convert a legacy article to use content blocks
      parameters:
      - description: Article ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Article'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Migrate article to blocks
      tags:
      - Content Blocks
  /api/articles/{id}/secure:
    get:
      description: Retrieve a single article by its ID. Redaction applied when NEWS_REDACTION_ENABLED=true
      parameters:
      - description: Article ID
        in: path
        name: id
        required: true
        type: integer
      - description: Force redaction of sensitive data
        in: query
        name: redact
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Article'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get a single article by ID with optional redaction
      tags:
      - Articles
  /api/articles/{id}/with-blocks:
    get:
      description: Retrieve an article with its content blocks for editing
      parameters:
      - description: Article ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Article'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get article with content blocks
      tags:
      - Articles
  /api/articles/blocks:
    post:
      consumes:
      - application/json
      description: Add a new article using modern content blocks system
      parameters:
      - description: Article with content blocks data
        in: body
        name: article
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateArticleWithBlocksRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Article'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new article with content blocks
      tags:
      - Articles
  /api/articles/recommendations:
    get:
      description: Retrieve a list of recommended articles for the authenticated user
        or based on general popularity if not authenticated.
      parameters:
      - default: 10
        description: Number of recommendations to return
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Article'
            type: array
        "401":
          description: If authentication is required and fails
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: If an internal error occurs
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get recommended articles
      tags:
      - Articles
  /api/articles/secure:
    get:
      description: Retrieve a list of articles with pagination. Redaction applied
        when NEWS_REDACTION_ENABLED=true
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Number of items per page (default: 10, max: 50)'
        in: query
        name: limit
        type: integer
      - description: Filter by category
        in: query
        name: category
        type: string
      - description: Force redaction of sensitive data
        in: query
        name: redact
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PaginatedResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get articles with pagination and optional redaction
      tags:
      - Articles
  /api/articles/trending:
    get:
      description: Retrieve a list of trending articles based on recent interactions
      parameters:
      - default: 10
        description: Number of trending articles to return
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Article'
            type: array
        "500":
          description: If an internal error occurs
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get trending articles
      tags:
      - Articles
  /api/auth/login:
    post:
      consumes:
      - application/json
      description: Login with username and password to receive JWT tokens with enhanced
        security
      parameters:
      - description: Login Credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/dto.UserLoginDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.TokenPair'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Login with enhanced security
      tags:
      - Auth
  /api/auth/logout:
    post:
      description: Securely logout and invalidate tokens
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Logout with enhanced security
      tags:
      - Auth
  /api/auth/notifications:
    get:
      description: Retrieve notifications for the authenticated user
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      - description: Fetch only unread notifications
        in: query
        name: unread_only
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PaginatedNotificationsResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user notifications
      tags:
      - Users
  /api/auth/notifications/{notification_id}/read:
    patch:
      description: Mark a specific notification as read for the authenticated user
      parameters:
      - description: Notification ID
        in: path
        name: notification_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Notification'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Mark notification as read
      tags:
      - Users
  /api/auth/notifications/read-all:
    patch:
      description: Mark all unread notifications as read for the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.MarkAllNotificationsReadResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Mark all notifications as read
      tags:
      - Users
  /api/auth/profile:
    put:
      consumes:
      - application/json
      description: Update the authenticated user's profile information
      parameters:
      - description: Profile data to update
        in: body
        name: profile
        required: true
        schema:
          $ref: '#/definitions/models.UpdateUserProfileRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update user profile
      tags:
      - Users
  /api/auth/refresh:
    post:
      description: Use refresh token to get a new access token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.TokenPair'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Refresh authentication token
      tags:
      - Auth
  /api/auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user with comprehensive security validation
      parameters:
      - description: User Registration Data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UserRegistrationDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.UserResponseDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Register a new user with enhanced security
      tags:
      - Auth
  /api/blocks/{block_id}:
    delete:
      description: Delete an existing content block
      parameters:
      - description: Content Block ID
        in: path
        name: block_id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Delete a content block
      tags:
      - Content Blocks
    put:
      consumes:
      - application/json
      description: Update an existing content block
      parameters:
      - description: Content Block ID
        in: path
        name: block_id
        required: true
        type: integer
      - description: Content block update data
        in: body
        name: block
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateContentBlockRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ArticleContentBlock'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Update a content block
      tags:
      - Content Blocks
  /api/breaking-news:
    get:
      description: Retrieves all currently active breaking news banners
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.BreakingNewsBanner'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get active breaking news banners
      tags:
      - Breaking News
  /api/cache/analytics:
    get:
      description: Retrieve advanced cache performance analytics and optimization
        recommendations
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Get cache analytics
      tags:
      - Monitoring
  /api/cache/health:
    get:
      description: Check the health status of all cache layers
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Get cache health
      tags:
      - Monitoring
  /api/cache/preload:
    post:
      description: Preload cache with popular content for better performance
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Preload cache
      tags:
      - Monitoring
  /api/cache/stats:
    get:
      description: Retrieve detailed cache statistics for monitoring and debugging
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get cache statistics
      tags:
      - Monitoring
  /api/cache/warm:
    post:
      description: Warm cache with popular content (public endpoint for development)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Public cache warm
      tags:
      - Cache
  /api/content-blocks/analyze-url:
    post:
      consumes:
      - application/json
      description: Check if a URL can be embedded and return embed information
      parameters:
      - description: URL to analyze
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.AnalyzeURLRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.AnalyzeURLResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Analyze URL for embed compatibility
      tags:
      - Content Blocks
  /api/content-blocks/detect-embeds:
    post:
      consumes:
      - application/json
      description: Analyze content and suggest automatic embed blocks
      parameters:
      - description: Content to analyze
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.DetectEmbedsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.DetectEmbedsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Detect embeddable URLs in content
      tags:
      - Content Blocks
  /api/live-news:
    get:
      description: Retrieves all currently active live news streams
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.LiveNewsStream'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get active live news streams
      tags:
      - Live News
  /api/live-news/{id}:
    get:
      description: Retrieves a specific live news stream by ID
      parameters:
      - description: Stream ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LiveNewsStream'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get live stream by ID
      tags:
      - Live News
  /api/live-news/{id}/updates:
    get:
      description: Gets all updates for a specific live news stream with pagination
      parameters:
      - description: Stream ID
        in: path
        name: id
        required: true
        type: integer
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Items per page (default: 20)'
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PaginatedResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get updates for a live news stream
      tags:
      - Live News
  /api/news-stories:
    get:
      description: Retrieves all currently active news stories for display
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.NewsStory'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get active news stories
      tags:
      - News Stories
  /api/news-stories/{id}:
    get:
      description: Retrieves a specific news story by ID
      parameters:
      - description: Story ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.NewsStory'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get story by ID
      tags:
      - News Stories
  /api/news-stories/unviewed:
    get:
      description: Retrieves news stories that the authenticated user hasn't seen
        yet
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.NewsStory'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user stories that haven't been viewed
      tags:
      - News Stories
  /api/pages:
    get:
      description: Retrieve a list of pages with pagination and filtering
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      - description: Filter by status
        in: query
        name: status
        type: string
      - description: Filter by template
        in: query
        name: template
        type: string
      - description: Filter by language
        in: query
        name: language
        type: string
      - description: Filter by parent ID
        in: query
        name: parent_id
        type: integer
      - description: Search in title and content
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/services.PaginatedPagesResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get all pages
      tags:
      - Pages
  /api/pages/{id}:
    get:
      description: Retrieve a single page by its ID
      parameters:
      - description: Page ID
        in: path
        name: id
        required: true
        type: integer
      - default: false
        description: Include content blocks
        in: query
        name: include_blocks
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Page'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get a page by ID
      tags:
      - Pages
  /api/pages/{id}/blocks:
    get:
      description: Retrieve all content blocks for a specific page
      parameters:
      - description: Page ID
        in: path
        name: id
        required: true
        type: integer
      - default: false
        description: Include hidden blocks
        in: query
        name: include_hidden
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.PageContentBlock'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get content blocks for a page
      tags:
      - Pages
  /api/pages/hierarchy:
    get:
      description: Retrieve page hierarchy (parent-child relationships)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Page'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get page hierarchy
      tags:
      - Pages
  /api/pages/slug/{slug}:
    get:
      description: Retrieve a single page by its slug
      parameters:
      - description: Page slug
        in: path
        name: slug
        required: true
        type: string
      - default: false
        description: Include content blocks
        in: query
        name: include_blocks
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Page'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get a page by slug
      tags:
      - Pages
  /api/user/interactions:
    get:
      description: Get paginated list of user's interactions with articles
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Items per page
        in: query
        name: limit
        type: integer
      - description: Filter by interaction type
        in: query
        name: type
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user's article interactions
      tags:
      - Analytics
  /api/user/reading-history:
    get:
      description: Retrieve articles that the authenticated user has previously viewed
        or bookmarked
      parameters:
      - default: 20
        description: Number of articles to return
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Article'
            type: array
        "401":
          description: If authentication fails
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: If an internal error occurs
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user's reading history
      tags:
      - User
  /api/users/{username}/articles:
    get:
      description: Get a list of articles published by a specific user
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PaginatedArticlesResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get user's articles
      tags:
      - Users
  /api/users/{username}/profile:
    get:
      description: Get a user's public profile information
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserProfileResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get user profile
      tags:
      - Users
  /api/v1/articles/{id}/localized:
    get:
      consumes:
      - application/json
      description: Retrieve a single article in the user's preferred language with
        fallback
      parameters:
      - description: Article ID
        in: path
        name: id
        required: true
        type: integer
      - description: Language code (e.g., 'en', 'tr', 'es')
        in: query
        name: lang
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LocalizedArticle'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get localized article by ID
      tags:
      - Article Translations
  /api/v1/articles/{id}/translations:
    get:
      consumes:
      - application/json
      description: Retrieve all available translations for a specific article
      parameters:
      - description: Article ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ArticleWithTranslations'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get all translations for an article
      tags:
      - Article Translations
    post:
      consumes:
      - application/json
      description: Create a translation for an existing article
      parameters:
      - description: Article ID
        in: path
        name: id
        required: true
        type: integer
      - description: Translation data
        in: body
        name: translation
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateTranslationRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.ArticleTranslation'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Create a new article translation
      tags:
      - Article Translations
  /api/v1/articles/{id}/translations/{language}:
    delete:
      consumes:
      - application/json
      description: Delete an existing article translation
      parameters:
      - description: Article ID
        in: path
        name: id
        required: true
        type: integer
      - description: Language code
        in: path
        name: language
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Delete an article translation
      tags:
      - Article Translations
    put:
      consumes:
      - application/json
      description: Update an existing article translation
      parameters:
      - description: Article ID
        in: path
        name: id
        required: true
        type: integer
      - description: Language code
        in: path
        name: language
        required: true
        type: string
      - description: Translation data
        in: body
        name: translation
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateTranslationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ArticleTranslation'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Update an article translation
      tags:
      - Article Translations
  /api/v1/articles/localized:
    get:
      consumes:
      - application/json
      description: Retrieve a paginated list of articles in the user's preferred language
        with fallback
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Number of articles per page
        in: query
        name: limit
        type: integer
      - description: Language code (e.g., 'en', 'tr', 'es')
        in: query
        name: lang
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PaginatedLocalizedArticlesResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get localized articles
      tags:
      - Article Translations
  /api/v1/articles/search/localized:
    get:
      consumes:
      - application/json
      description: Search articles in the user's preferred language with fallback
      parameters:
      - description: Search query
        in: query
        name: q
        required: true
        type: string
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Number of articles per page
        in: query
        name: limit
        type: integer
      - description: Language code (e.g., 'en', 'tr', 'es')
        in: query
        name: lang
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PaginatedLocalizedArticlesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Search localized articles
      tags:
      - Article Translations
  /api/v1/search:
    get:
      consumes:
      - application/json
      description: Perform semantic search using AI-generated embeddings for better
        relevance. Rate limited to control costs.
      parameters:
      - description: Search query
        in: query
        name: query
        required: true
        type: string
      - description: Language filter
        in: query
        name: lang
        type: string
      - description: Region filter
        in: query
        name: region
        type: string
      - default: 10
        description: Number of results (max 50)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SemanticSearchResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "429":
          description: Too Many Requests
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Semantic Search
      tags:
      - AI
  /api/v1/search/limits:
    get:
      description: Get current search rate limit status for the user/IP
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Get Search Rate Limit Status
      tags:
      - AI
  /api/v1/translations/stats:
    get:
      consumes:
      - application/json
      description: Get statistics about article translations
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TranslationStats'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get translation statistics
      tags:
      - Article Translations
  /api/videos:
    get:
      description: Retrieve a paginated list of videos with filtering options
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Items per page (max 50)
        in: query
        name: limit
        type: integer
      - description: Filter by category
        in: query
        name: category
        type: string
      - default: created_at
        description: 'Sort by: created_at, views, votes'
        in: query
        name: sort
        type: string
      - default: desc
        description: 'Order: asc, desc'
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PaginatedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get videos feed
      tags:
      - Videos
    post:
      consumes:
      - multipart/form-data
      description: Upload and create a new video with metadata
      parameters:
      - description: Video file to upload
        in: formData
        name: video
        required: true
        type: file
      - description: Video title
        in: formData
        name: title
        required: true
        type: string
      - description: Video description
        in: formData
        name: description
        type: string
      - description: Category ID
        in: formData
        name: category_id
        type: integer
      - description: Comma-separated tags
        in: formData
        name: tags
        type: string
      - default: true
        description: Is video public
        in: formData
        name: is_public
        type: boolean
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Video'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "413":
          description: File too large
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Upload a new video
      tags:
      - Videos
  /api/videos/{id}:
    delete:
      description: Delete a video (video owner only)
      parameters:
      - description: Video ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: Video deleted successfully
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Not video owner
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a video
      tags:
      - Videos
    get:
      description: Retrieve a single video by ID with full details
      parameters:
      - description: Video ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Video'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get single video
      tags:
      - Videos
    put:
      consumes:
      - application/json
      description: Update video title, description, and other metadata (video owner
        only)
      parameters:
      - description: Video ID
        in: path
        name: id
        required: true
        type: integer
      - description: Video update data
        in: body
        name: video
        required: true
        schema:
          $ref: '#/definitions/models.Video'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Video'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Not video owner
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update video metadata
      tags:
      - Videos
  /api/videos/{id}/analytics:
    get:
      description: Get analytics data for a specific video
      parameters:
      - description: Video ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get video analytics
      tags:
      - Video Analytics
  /api/videos/{id}/comments:
    get:
      description: Retrieve comments for a specific video
      parameters:
      - description: Video ID
        in: path
        name: id
        required: true
        type: integer
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PaginatedResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get video comments
      tags:
      - Videos
    post:
      consumes:
      - application/json
      description: Add a comment to a video
      parameters:
      - description: Video ID
        in: path
        name: id
        required: true
        type: integer
      - description: Comment data
        in: body
        name: comment
        required: true
        schema:
          $ref: '#/definitions/models.CreateCommentRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.VideoComment'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Video not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a comment on a video
      tags:
      - Videos
  /api/videos/{id}/interact:
    post:
      consumes:
      - application/json
      description: Record a user's interaction with a video (view, like, dislike,
        share, etc.)
      parameters:
      - description: Video ID
        in: path
        name: id
        required: true
        type: integer
      - description: Interaction data
        in: body
        name: interaction
        required: true
        schema:
          $ref: '#/definitions/handlers.VideoInteractionRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.VideoView'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Record user interaction with video
      tags:
      - Video Analytics
  /api/videos/{id}/my-vote-cached:
    get:
      description: Check if authenticated user has voted on a video
      parameters:
      - description: Video ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user vote status (Cache Optimized)
      tags:
      - Videos
  /api/videos/{id}/process:
    post:
      consumes:
      - application/json
      description: Manually trigger video processing (transcoding, thumbnails, AI
        analysis)
      parameters:
      - description: Video ID
        in: path
        name: id
        required: true
        type: integer
      - description: Processing options
        in: body
        name: options
        schema:
          $ref: '#/definitions/models.VideoProcessingOptions'
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/models.ProcessingJobResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Video not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Trigger video processing
      tags:
      - Video Processing
  /api/videos/{id}/processing-status:
    get:
      description: Get the current processing status of a video
      parameters:
      - description: Video ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.VideoProcessingStatusResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Video not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get video processing status
      tags:
      - Video Processing
  /api/videos/{id}/stats-cached:
    get:
      description: Get video like/dislike counts with cache
      parameters:
      - description: Video ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.VoteResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get video statistics (Cache Optimized)
      tags:
      - Videos
  /api/videos/{id}/vote:
    post:
      consumes:
      - application/json
      description: Like or dislike a video
      parameters:
      - description: Video ID
        in: path
        name: id
        required: true
        type: integer
      - description: 'Vote data (type: like/dislike)'
        in: body
        name: vote
        required: true
        schema:
          $ref: '#/definitions/models.VoteRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.VoteResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Vote on a video
      tags:
      - Videos
  /api/videos/{id}/vote-cached:
    post:
      consumes:
      - application/json
      description: Like or dislike a video with real-time cache updates
      parameters:
      - description: Video ID
        in: path
        name: id
        required: true
        type: integer
      - description: 'Vote data (type: like/dislike)'
        in: body
        name: vote
        required: true
        schema:
          $ref: '#/definitions/models.VoteRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.VoteResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Vote on a video (Cache Optimized)
      tags:
      - Videos
  /api/videos/my-interactions:
    get:
      description: Get paginated list of user's interactions with videos
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Items per page
        in: query
        name: limit
        type: integer
      - description: Filter by interaction type
        in: query
        name: type
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user's video interactions
      tags:
      - Video Analytics
  /api/videos/processing-jobs:
    get:
      description: Get all processing jobs for the authenticated user's videos
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Items per page
        in: query
        name: limit
        type: integer
      - description: 'Filter by status: pending, processing, completed, failed'
        in: query
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PaginatedProcessingJobsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user's video processing jobs
      tags:
      - Video Processing
  /api/ws/notifications:
    get:
      description: Establishes a WebSocket connection for receiving real-time notifications
      parameters:
      - description: User ID for connection
        in: query
        name: user_id
        required: true
        type: integer
      responses:
        "101":
          description: Switching Protocols
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: WebSocket connection for real-time notifications
      tags:
      - WebSocket
  /api/ws/stats:
    get:
      description: Returns statistics about connected users and notification system
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.NotificationStatsResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get notification statistics
      tags:
      - WebSocket
  /api/ws/test:
    post:
      consumes:
      - application/json
      description: Sends a test notification (admin only)
      parameters:
      - description: Test notification
        in: body
        name: notification
        required: true
        schema:
          $ref: '#/definitions/handlers.TestNotificationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Send test notification
      tags:
      - WebSocket
  /api/ws/user/{user_id}/status:
    get:
      description: Checks if a specific user is connected to WebSocket
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.UserConnectionStatusResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Check user connection status
      tags:
      - WebSocket
  /articles/{article_id}/comments:
    get:
      description: Retrieve comments for a specific article with threading support
      parameters:
      - description: Article ID
        in: path
        name: article_id
        required: true
        type: integer
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Comments per page
        in: query
        name: limit
        type: integer
      - default: newest
        description: 'Sort by: newest, oldest, likes'
        in: query
        name: sort
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PaginatedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get comments for an article
      tags:
      - Comments
    post:
      consumes:
      - application/json
      description: Create a new comment on an article (requires authentication)
      parameters:
      - description: Article ID
        in: path
        name: article_id
        required: true
        type: integer
      - description: Comment data
        in: body
        name: comment
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateCommentRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Comment'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Create a new comment
      tags:
      - Comments
  /articles/{id}/bookmark:
    post:
      consumes:
      - application/json
      description: Add or remove an article from user's bookmarks
      parameters:
      - description: Article ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.BookmarkResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Bookmark an article
      tags:
      - Bookmarks
  /articles/{id}/vote:
    post:
      consumes:
      - application/json
      description: Like or dislike an article
      parameters:
      - description: Article ID
        in: path
        name: id
        required: true
        type: integer
      - description: Vote data
        in: body
        name: vote
        required: true
        schema:
          $ref: '#/definitions/handlers.VoteRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.VoteResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Vote on an article
      tags:
      - Votes
  /categories:
    get:
      description: Retrieve all article categories with unified cache support
      parameters:
      - description: Return hierarchical structure
        in: query
        name: hierarchical
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Category'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get all categories
      tags:
      - Categories
  /categories/{slug}:
    get:
      description: Retrieve a single category by its slug with cache support
      parameters:
      - description: Category slug
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Category'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get category by slug
      tags:
      - Categories
  /comments/{id}:
    delete:
      description: Delete a comment (only by comment author or admin)
      parameters:
      - description: Comment ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Delete a comment
      tags:
      - Comments
    put:
      consumes:
      - application/json
      description: Update an existing comment (only by comment author)
      parameters:
      - description: Comment ID
        in: path
        name: id
        required: true
        type: integer
      - description: Comment data
        in: body
        name: comment
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateCommentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Comment'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Update a comment
      tags:
      - Comments
  /comments/{id}/vote:
    post:
      consumes:
      - application/json
      description: Like or dislike a comment
      parameters:
      - description: Comment ID
        in: path
        name: id
        required: true
        type: integer
      - description: Vote data
        in: body
        name: vote
        required: true
        schema:
          $ref: '#/definitions/handlers.VoteRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.VoteResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Vote on a comment
      tags:
      - Comments
  /content/{entity_type}/{entity_id}:
    get:
      description: Get content in specified language with fallback to default
      parameters:
      - description: Entity type (category, tag, menu, notification)
        in: path
        name: entity_type
        required: true
        type: string
      - description: Entity ID
        in: path
        name: entity_id
        required: true
        type: integer
      - default: tr
        description: Language code
        in: query
        name: lang
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema: {}
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get localized content
      tags:
      - Translation
  /debug/http2/push-test:
    get:
      description: Demonstrates HTTP/2 server push by pushing static resources
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Test HTTP/2 server push
      tags:
      - System
  /debug/http2/status:
    get:
      description: Returns detailed information about HTTP/2 server capabilities and
        current connection
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.HTTP2StatusResponse'
      summary: Get HTTP/2 server status
      tags:
      - System
  /debug/json-engine:
    get:
      description: Returns information about Sonic JSON integration and performance
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.JSONEngineStatus'
      summary: Get JSON engine status
      tags:
      - Debug
  /debug/json-performance:
    get:
      description: Runs real-time JSON performance benchmark comparing operations
      parameters:
      - default: 1000
        description: Number of iterations for benchmark
        in: query
        name: iterations
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Test JSON performance
      tags:
      - Debug
  /media:
    get:
      description: Retrieve all media files with pagination and filtering
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Items per page
        in: query
        name: limit
        type: integer
      - description: Filter by MIME type (image, video, audio, document)
        in: query
        name: mime_type
        type: string
      - description: Filter by uploader user ID
        in: query
        name: uploaded_by
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get all media files
      tags:
      - Media
  /media/{id}:
    delete:
      description: Delete a media file and its record (admin or owner only)
      parameters:
      - description: Media ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Delete a media file
      tags:
      - Media
    get:
      description: Retrieve a single media file by its ID
      parameters:
      - description: Media ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Media'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get media file by ID
      tags:
      - Media
    put:
      consumes:
      - application/json
      description: Update media file metadata (alt text, caption)
      parameters:
      - description: Media ID
        in: path
        name: id
        required: true
        type: integer
      - description: Media metadata
        in: body
        name: media
        required: true
        schema:
          $ref: '#/definitions/models.Media'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Media'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Update media metadata
      tags:
      - Media
  /media/upload:
    post:
      consumes:
      - multipart/form-data
      description: Upload a new media file (authenticated users)
      parameters:
      - description: Media file to upload
        in: formData
        name: file
        required: true
        type: file
      - description: Alternative text for the media
        in: formData
        name: alt_text
        type: string
      - description: Caption for the media
        in: formData
        name: caption
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Media'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "413":
          description: Request Entity Too Large
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Upload a media file
      tags:
      - Media
  /menu-items:
    get:
      description: Retrieve menu items for a specific menu
      parameters:
      - description: Filter by menu ID
        in: query
        name: menu_id
        type: integer
      - description: Filter by parent ID (0 for root items)
        in: query
        name: parent_id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.MenuItem'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get menu items
      tags:
      - MenuItem
  /menu-items/{id}:
    get:
      description: Retrieve a single menu item by its ID
      parameters:
      - description: Menu Item ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MenuItem'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get menu item by ID
      tags:
      - MenuItem
  /menus:
    get:
      description: Retrieve all menus with their items
      parameters:
      - description: Filter by location (header, footer, sidebar)
        in: query
        name: location
        type: string
      - default: true
        description: Filter by active status
        in: query
        name: active
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Menu'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get all menus
      tags:
      - Menu
  /menus/{slug}:
    get:
      description: Retrieve a single menu by its slug with items
      parameters:
      - description: Menu slug
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Menu'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get menu by slug
      tags:
      - Menu
  /security/events:
    get:
      description: Get security-related events for the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: security_events
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get Security Events
      tags:
      - Security
  /security/login-history:
    get:
      description: Get the login history for the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: login_history
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get Login History
      tags:
      - Security
  /security/sessions:
    delete:
      description: Revoke all active sessions for the authenticated user except the
        current one
      produces:
      - application/json
      responses:
        "200":
          description: message and revoked_count
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Revoke All Sessions
      tags:
      - Security
    get:
      description: Get all active sessions for the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: sessions
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get User Sessions
      tags:
      - Security
  /security/sessions/{session_id}:
    delete:
      description: Revoke a specific active session for the authenticated user
      parameters:
      - description: Session ID
        in: path
        name: session_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: message
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Revoke User Session
      tags:
      - Security
  /settings:
    get:
      description: Retrieve all system settings or filter by group/public status
      parameters:
      - description: Filter by settings group
        in: query
        name: group
        type: string
      - description: Filter by public settings only
        in: query
        name: public
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Setting'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get all settings
      tags:
      - Settings
  /settings/{key}:
    get:
      description: Retrieve a single setting by its key
      parameters:
      - description: Setting key
        in: path
        name: key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Setting'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get setting by key
      tags:
      - Settings
  /settings/groups:
    get:
      description: Retrieve all available setting groups
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: string
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get setting groups
      tags:
      - Settings
  /tags:
    get:
      description: Retrieve all article tags with optional usage count sorting (Cache
        Optimized)
      parameters:
      - default: name
        description: 'Sort by: name, usage_count'
        in: query
        name: sort
        type: string
      - default: 50
        description: Limit number of results
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Tag'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get all tags
      tags:
      - Tags
  /tags/{slug}:
    get:
      description: Retrieve a single tag by its slug with related articles (Cache
        Optimized)
      parameters:
      - description: Tag slug
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Tag'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get tag by slug
      tags:
      - Tags
  /user/bookmarks:
    get:
      description: Retrieve all bookmarked articles for the authenticated user
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PaginatedResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Get user's bookmarks
      tags:
      - Bookmarks
  /users/{user_id}/follow:
    post:
      consumes:
      - application/json
      description: Follow or unfollow another user
      parameters:
      - description: User ID to follow
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.FollowResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Follow a user
      tags:
      - Social
  /users/{user_id}/followers:
    get:
      description: Get list of users following the specified user
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PaginatedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get user's followers
      tags:
      - Social
  /users/{user_id}/following:
    get:
      description: Get list of users that the specified user is following
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PaginatedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get users followed by user
      tags:
      - Social
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
